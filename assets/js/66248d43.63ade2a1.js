"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[6362],{82247:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var a=n(14041);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),m=r,y=g["".concat(l,".").concat(m)]||g[m]||d[m]||i;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94540:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(89575),r=(n(14041),n(82247));const i={sidebar_position:9,title:"Upgrading to Serenity/JS 3"},o="Upgrading to Serenity/JS 3",s={unversionedId:"getting-started/upgrading-to-serenity-js-3",id:"getting-started/upgrading-to-serenity-js-3",title:"Upgrading to Serenity/JS 3",description:"Serenity/JS 3.0 introduces a number of new features while aiming to retain backwards compatibility of most of the core APIs.",source:"@site/docs/getting-started/upgrading-to-serenity-js-3.mdx",sourceDirName:"getting-started",slug:"/getting-started/upgrading-to-serenity-js-3",permalink:"/handbook/getting-started/upgrading-to-serenity-js-3",draft:!1,editUrl:"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/docs/getting-started/upgrading-to-serenity-js-3.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"Upgrading to Serenity/JS 3"},sidebar:"docs",previous:{title:"Extending WebdriverIO",permalink:"/handbook/getting-started/serenity-js-with-webdriverio"},next:{title:"Web testing",permalink:"/handbook/web-testing/"}},l={},p=[{value:"Universal Web Testing Fa\xe7ade and Portable Test Code",id:"universal-web-testing-fa\xe7ade-and-portable-test-code",level:2},{value:"Configuring the <code>Actors</code>",id:"configuring-the-actors",level:3},{value:"Default cast of actors",id:"default-cast-of-actors",level:3},{value:"Implementing portable <code>Interaction</code>s and <code>Question</code>s",id:"implementing-portable-interactions-and-questions",level:3},{value:"Portable <code>PageElements</code>",id:"portable-pageelements",level:3},{value:"Taking Notes",id:"taking-notes",level:2},{value:"Using an untyped Notepad",id:"using-an-untyped-notepad",level:3},{value:"Waiting",id:"waiting",level:2},{value:"<code>@serenity-js/rest</code>",id:"serenity-jsrest",level:2},{value:"<code>Answerable&lt;WithAnswerableProperties&lt;AxiosRequestConfig&gt;&gt;</code> in HTTP requests",id:"answerablewithanswerablepropertiesaxiosrequestconfig-in-http-requests",level:3},{value:"Removed deprecated <code>ChangeApiUrl</code>",id:"removed-deprecated-changeapiurl",level:3},{value:"<code>@serenity-js/core</code>",id:"serenity-jscore",level:2},{value:"Screenplay-style dictionaries with <code>Question.fromObject</code>",id:"screenplay-style-dictionaries-with-questionfromobject",level:3},{value:"Formatting descriptions with <code>d</code> and <code>f</code>",id:"formatting-descriptions-with-d-and-f",level:3},{value:"<code>@serenity-js/web</code>",id:"serenity-jsweb",level:2},{value:"Page-specific functions",id:"page-specific-functions",level:3},{value:"Your feedback matters!",id:"your-feedback-matters",level:2}],c={toc:p},g="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(g,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"upgrading-to-serenityjs-3"},"Upgrading to Serenity/JS 3"),(0,r.yg)("p",null,"Serenity/JS 3.0 introduces a number of new features while aiming to retain backwards compatibility of most of the core APIs."),(0,r.yg)("p",null,"Serenity/JS 3 is ",(0,r.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@serenity-js/core"},"available on NPM")," and this guide\nwill help you get started and highlight notable differences from Serenity/JS 2."),(0,r.yg)("p",null,"All the ",(0,r.yg)("a",{parentName:"p",href:"/handbook/getting-started/project-templates/"},"Serenity/JS Project Templates")," are migrated to Serenity/JS 3.\nYou'll find code using the new Serenity/JS APIs on the ",(0,r.yg)("inlineCode",{parentName:"p"},"main")," branch while the ",(0,r.yg)("inlineCode",{parentName:"p"},"2.x")," branch still contains Serenity/JS 2\ncode for comparison:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/serenity-js/serenity-js-cucumber-webdriverio-template/tree/main"},"serenity-js-cucumber-webdriverio-template")," (",(0,r.yg)("a",{parentName:"li",href:"https://github.com/serenity-js/serenity-js-cucumber-webdriverio-template/compare/2.x...main"},"see diff"),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/serenity-js/serenity-js-mocha-webdriverio-template/tree/main"},"serenity-js-mocha-webdriverio-template")," (",(0,r.yg)("a",{parentName:"li",href:"https://github.com/serenity-js/serenity-js-mocha-webdriverio-template/compare/2.x...main"},"see diff"),")")),(0,r.yg)("h2",{id:"universal-web-testing-fa\xe7ade-and-portable-test-code"},"Universal Web Testing Fa\xe7ade and Portable Test Code"),(0,r.yg)("p",null,"The most significant change in the Web testing space is the introduction of the universal web testing fa\xe7ade - ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js/tree/main/packages/web"},(0,r.yg)("inlineCode",{parentName:"a"},"@serenity-js/web")),",\nand numerous features that help your tests become portable across the different test integration tools,\nsuch as Protractor, WebdriverIO, Playwright, Puppeteer, and so on."),(0,r.yg)("p",null,"The new module contains all the Web-related interactions and questions,\nwhile the integration-tool specific modules such as ",(0,r.yg)("a",{parentName:"p",href:"/api/playwright"},(0,r.yg)("inlineCode",{parentName:"a"},"@serenity-js/playwright")),",\n",(0,r.yg)("a",{parentName:"p",href:"/api/protractor"},(0,r.yg)("inlineCode",{parentName:"a"},"@serenity-js/protractor"))," and\n",(0,r.yg)("a",{parentName:"p",href:"/api/webdriverio"},(0,r.yg)("inlineCode",{parentName:"a"},"@serenity-js/webdriverio"))," contain only tool-specific models and abilities.\nThis change will help your test code be much more portable between the different integration tools,\nand will also help us significantly reduce the effort of introducing new integrations."),(0,r.yg)("p",null,"To see what the changes look like in practice, have a look at the TodoMVC tests implemented using:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/serenity-js/serenity-js/tree/main/examples/webdriverio-mocha-todomvc"},"Serenity/JS 3.x")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/serenity-js/serenity-js/tree/2.x/examples/webdriverio-mocha-todomvc"},"Serenity/JS 2.x"))),(0,r.yg)("p",null,"Let's discuss the changes below."),(0,r.yg)("h3",{id:"configuring-the-actors"},"Configuring the ",(0,r.yg)("inlineCode",{parentName:"h3"},"Actors")),(0,r.yg)("p",null,"The only non-portable part of Serenity/JS 3.x Web tests is your ",(0,r.yg)("inlineCode",{parentName:"p"},"Actors")," class.\nThat's because while your tests can be agnostic of the lower-level integration tool, the ",(0,r.yg)("inlineCode",{parentName:"p"},"Actors"),' need to "know" what tool to use.'),(0,r.yg)("p",null,"The first change you'll see is in how the ",(0,r.yg)("inlineCode",{parentName:"p"},"Actors")," class is defined."),(0,r.yg)("p",null,"In ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js/blob/4779aa66431addc63bbc77c435a9e25bf1f39d13/examples/webdriverio-mocha-todomvc/src/Actors.ts"},"Serenity/JS 2"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Actor, Cast } from '@serenity-js/core';\nimport { BrowseTheWeb } from '@serenity-js/webdriverio';\n\nexport class Actors implements Cast {\n    prepare(actor: Actor): Actor {\n        return actor.whoCan(\n            BrowseTheWeb.using(browser),\n        );\n    }\n}\n")),(0,r.yg)("p",null,"In ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js/blob/4779aa66431addc63bbc77c435a9e25bf1f39d13/examples/webdriverio-mocha-todomvc/src/Actors.ts"},"Serenity/JS 3"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Actor, Cast } from '@serenity-js/core';\nimport { BrowseTheWebWithWebdriverIO } from '@serenity-js/webdriverio';\n\nexport class Actors implements Cast {\n    prepare(actor: Actor): Actor {\n        return actor.whoCan(\n            BrowseTheWebWithWebdriverIO.using(browser),\n        );\n    }\n}\n")),(0,r.yg)("p",null,"So here's the difference:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Instead of importing ",(0,r.yg)("inlineCode",{parentName:"li"},"BrowseTheWeb")," you import ",(0,r.yg)("inlineCode",{parentName:"li"},"BrowseTheWebWithWebdriverIO")," (which is a tool-specific implementation of the ",(0,r.yg)("inlineCode",{parentName:"li"},"BrowseTheWeb")," interface)"),(0,r.yg)("li",{parentName:"ul"},"Next, you give the new tool-specific ability to the actor:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"import { Actor, Cast } from '@serenity-js/core';\n- import { BrowseTheWeb } from '@serenity-js/webdriverio';\n+ import { BrowseTheWebWithWebdriverIO } from '@serenity-js/webdriverio';\n\nexport class Actors implements Cast {\n    prepare(actor: Actor): Actor {\n        return actor.whoCan(\n-           BrowseTheWeb.using(browser),\n+           BrowseTheWebWithWebdriverIO.using(browser),\n        );\n    }\n}\n")),(0,r.yg)("p",null,"However, you might not need to a custom cast of actors at all! ",(0,r.yg)("strong",{parentName:"p"},"Serenity/JS now provides you a default one"),"."),(0,r.yg)("h3",{id:"default-cast-of-actors"},"Default cast of actors"),(0,r.yg)("p",null,"To make it easier for you to get started with Serenity/JS ",(0,r.yg)("a",{parentName:"p",href:"/handbook/design/screenplay-pattern"},"Screenplay Pattern")," APIs,\nseveral of the Serenity/JS test runner integrations now come with a default cast of actors:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/handbook/test-runners/playwright-test"},"Serenity/JS Playwright Test")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/handbook/test-runners/protractor"},"Serenity/JS Protractor")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/handbook/test-runners/webdriverio"},"Serenity/JS WebdriverIO"))),(0,r.yg)("admonition",{title:"You might not need a custom cast of actors",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Default cast of actors provided by Serenity/JS v3 can help you to avoid having to specify a custom cast altogether.")),(0,r.yg)("p",null,"The default ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Cast"},(0,r.yg)("inlineCode",{parentName:"a"},"Cast"))," provides actors where each actor has the abilities to:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/api/web/class/BrowseTheWeb"},(0,r.yg)("inlineCode",{parentName:"a"},"BrowseTheWeb")),", using the test runner-specific implementation of ",(0,r.yg)("inlineCode",{parentName:"li"},"BrowseTheWeb")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/api/core/class/TakeNotes"},(0,r.yg)("inlineCode",{parentName:"a"},"TakeNotes.usingAnEmptyNotepad()")))),(0,r.yg)("p",null,"However, if the default configuration is not sufficient to your needs,\nevery test runner integration still lets you configure a custom cast."),(0,r.yg)("p",null,"Learn how to configure a custom cast of actors with:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/handbook/test-runners/playwright-test#configuring-a-custom-cast-of-actors"},"Playwright Test")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/handbook/test-runners/protractor#configuring-a-custom-cast-of-actors"},"Protractor")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/handbook/test-runners/webdriverio#configuring-a-custom-cast-of-actors"},"WebdriverIO"))),(0,r.yg)("h3",{id:"implementing-portable-interactions-and-questions"},"Implementing portable ",(0,r.yg)("inlineCode",{parentName:"h3"},"Interaction"),"s and ",(0,r.yg)("inlineCode",{parentName:"h3"},"Question"),"s"),(0,r.yg)("p",null,"Because ",(0,r.yg)("inlineCode",{parentName:"p"},"BrowseTheWebWithWebdriverIO extends BrowseTheWeb"),", any custom interactions and questions should still use the ",(0,r.yg)("strong",{parentName:"p"},"generic and tool-agnostic")," ",(0,r.yg)("inlineCode",{parentName:"p"},"BrowseTheWeb")," from ",(0,r.yg)("inlineCode",{parentName:"p"},"@serenity-js/web")," to be portable between the different integration tools. Note that this also means that there's a good chance that any custom interactions and questions you have implemented with Serenity/JS 2 would still work with few if any changes with Serenity/JS 3."),(0,r.yg)("p",null,"How does it work? In Serenity 3, calling ",(0,r.yg)("inlineCode",{parentName:"p"},"BrowseTheWeb.as(actor)")," looks up any ability that extends the base ",(0,r.yg)("inlineCode",{parentName:"p"},"BrowseTheWeb"),", so currently either ",(0,r.yg)("inlineCode",{parentName:"p"},"BrowseTheWebWithWebdriverIO"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"BrowseTheWebWithProtractor"),", or your custom extensions of those classes."),(0,r.yg)("p",null,"For example, the below custom interaction to ",(0,r.yg)("inlineCode",{parentName:"p"},"ReloadPage")," is ",(0,r.yg)("strong",{parentName:"p"},"portable"),", which means that it works with both ",(0,r.yg)("inlineCode",{parentName:"p"},"BrowseTheWebWithWebdriverIO")," ",(0,r.yg)("em",{parentName:"p"},"and")," ",(0,r.yg)("inlineCode",{parentName:"p"},"BrowseTheWebWithProtractor"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Actor, Interaction } from '@serenity-js/core';\nimport { BrowseTheWeb } from '@serenity-js/web'\n\nconst ReloadPage = () =>\n    Interaction.where(`#actor reloads a page`, (actor: Actor) => {\n        return BrowseTheWeb.as(actor).reloadPage();\n    });\n")),(0,r.yg)("admonition",{title:"Pro tip",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"If you're into software design patterns, you can think of ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Actor"},"Actors")," as tiny ",(0,r.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dependency_injection"},"Dependency Injection Containers"),".")),(0,r.yg)("h3",{id:"portable-pageelements"},"Portable ",(0,r.yg)("a",{parentName:"h3",href:"/api/web/class/PageElements"},(0,r.yg)("inlineCode",{parentName:"a"},"PageElements"))),(0,r.yg)("p",null,"The next significant change is the ",(0,r.yg)("strong",{parentName:"p"},"removal of ",(0,r.yg)("inlineCode",{parentName:"strong"},"Target")," classes")," in favour of portable ",(0,r.yg)("a",{parentName:"p",href:"/api/web/class/PageElement"},(0,r.yg)("inlineCode",{parentName:"a"},"PageElement"))," and ",(0,r.yg)("a",{parentName:"p",href:"/api/web/class/PageElements"},(0,r.yg)("inlineCode",{parentName:"a"},"PageElements"))," implementations. Serenity/JS 3 also uses its own tool-agnostic locators."),(0,r.yg)("p",null,"It will all become more clear with an example."),(0,r.yg)("p",null,"In ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js/blob/2.x/examples/webdriverio-mocha-todomvc/src/todo-list/ui/TodoList.ts"},"Serenity/JS 2")," you'd define the elements you want your tests to interact with using syntax similar to the below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { equals } from '@serenity-js/assertions';\nimport { Question } from '@serenity-js/core';\nimport { by, Target } from '@serenity-js/webdriverio';\n\nexport class TodoList {\n    static newTodoInput =\n        Target.the('\"What needs to be done?\" input box')\n            .located(by.css('.new-todo'));\n\n    static editTodoInput =\n        Target.the('\"What needs to be done?\" input box')\n            .located(by.css('.todo-list li.editing .edit'));\n\n    static items =\n        Target.all('List of Items')\n            .located(by.css('.todo-list li'));\n\n    static itemCalled = (name: string): Question<Promise<Element<'async'>>> =>\n        TodoList.items\n            .where(Text, equals(name))\n            .first();\n}\n")),(0,r.yg)("p",null,"Note that in the listing above:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"by")," is tool-specific and comes from ",(0,r.yg)("inlineCode",{parentName:"li"},"@serenity-js/webdriverio")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"TodoList.itemCalled")," is defined as returning ",(0,r.yg)("inlineCode",{parentName:"li"},"Question<Promise<Element<'async'>>>")," with ",(0,r.yg)("inlineCode",{parentName:"li"},"Element")," again being tool-specific and coming from ",(0,r.yg)("inlineCode",{parentName:"li"},"webdriverio"))),(0,r.yg)("p",null,"Both of the above issues make our code bound to the lower-level test integration tool."),(0,r.yg)("p",null,"In ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js/tree/main/examples/webdriverio-mocha-todomvc/src/todo-list/ui"},"Serenity/JS 3")," the changes to implementation look relatively small, but have powerful consequences:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElement, PageElements } from '@serenity-js/web';\nimport { includes } from '@serenity-js/assertions';\n\nexport class TodoList {\n    static newTodoInput =\n        PageElement.located(By.css('.new-todo'))\n            .describedAs('\"What needs to be done?\" input box')\n    ;\n\n    static editTodoInput =\n        PageElement.located(By.css('.todo-list li.editing .edit')).describedAs('edit field');\n\n    static items =\n        PageElements.located(By.css('.todo-list li')).describedAs('list of items');\n\n    static itemCalled = (name: string) =>\n        TodoList.items\n            .where(Text, includes(name))\n            .first()\n            .describedAs(`item called '${ name }'`);\n}\n")),(0,r.yg)("p",null,"To see the new ",(0,r.yg)("a",{parentName:"p",href:"/api/web/class/PageElement"},(0,r.yg)("inlineCode",{parentName:"a"},"PageElement"))," and ",(0,r.yg)("a",{parentName:"p",href:"/api/web/class/PageElements"},(0,r.yg)("inlineCode",{parentName:"a"},"PageElements"))," APIs in action, including using advanced element filters and mapping,\ncheck out the section on ",(0,r.yg)("a",{parentName:"p",href:"/handbook/web-testing/page-element-query-language"},"Page Element Query Language"),"\nand have a look at the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js/blob/main/integration/web-specs/spec/screenplay/models/PageElements.patterns.spec.ts"},"PageElements patterns spec")," on GitHub."),(0,r.yg)("admonition",{title:"Want more docs?",type:"info"},(0,r.yg)("p",{parentName:"admonition"},"If you'd like to see more tutorials or a screencast on this topic, let me know in the comments section below \ud83d\udc47\ud83d\udc47\ud83d\udc47")),(0,r.yg)("h2",{id:"taking-notes"},"Taking Notes"),(0,r.yg)("p",null,"The ability to ",(0,r.yg)("inlineCode",{parentName:"p"},"TakeNotes"),", the question about ",(0,r.yg)("inlineCode",{parentName:"p"},"Note"),", and the interaction to ",(0,r.yg)("inlineCode",{parentName:"p"},"TakeNote")," have been completely re-written to provide better type safety, more flexibility, and to take advantage of the new ",(0,r.yg)("a",{parentName:"p",href:"/api/core#QuestionAdapter"},(0,r.yg)("inlineCode",{parentName:"a"},"QuestionAdapter"))," APIs."),(0,r.yg)("p",null,"At the high level, there's a new class that represents the ",(0,r.yg)("inlineCode",{parentName:"p"},"Notepad"),". You can type it to specify what sort of data you're planning to store in it:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"\nimport { TakeNotes, Notepad } from '@serenity-js/core';\n\n// example interface describing the notes stored in the Notepad\ninterface MyNotes {\n  credentials: {\n    username?: string;\n    password?: string;\n  }\n}\n\nactorCalled('Leonard')\n  .whoCan(\n    TakeNotes.using(Notepad.empty<MyNotes>())\n  )\n")),(0,r.yg)("p",null,"You can then record and retrieve notes using ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Notepad#notes"},(0,r.yg)("inlineCode",{parentName:"a"},"Notepad.notes<T>()")),", or a convenient alias - ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/notes"},(0,r.yg)("inlineCode",{parentName:"a"},"notes<T>()")),".\nThose new APIs replace the ",(0,r.yg)("inlineCode",{parentName:"p"},"Note")," you might remember from Serenity/JS v2:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Log, Notepad, notes, TakeNotes } from '@serenity-js/core';\n\nactorCalled('Leonard')\n  .whoCan(\n    TakeNotes.using(Notepad.empty<MyNotes>())\n  )\n  .attemptsTo(\n    notes<MyNotes>().set('credentials', { username: 'leonard@example.org', password: 'P@ssw0rd!' }),\n    Log.the(\n        notes<MyNotes>().get('credentials').username    // note that `username` is a QuestionAdapter<string>\n    ),\n  )\n")),(0,r.yg)("p",null,"While you can still initialise the ability to ",(0,r.yg)("inlineCode",{parentName:"p"},"TakeNotes.usingAnEmptyNotepad()")," (which is an alias for ",(0,r.yg)("inlineCode",{parentName:"p"},"TakeNotes.using(Notepad.empty())"),"), you can now also provide an initial state:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Note, Notepad, TakeNotes } from '@serenity-js/core';\n\nactorCalled('Leonard')\n  .whoCan(\n    TakeNotes.using(\n      Notepad.with<MyNotes>({\n        credentials: {\n          username: 'leonard@example.org',\n          password: 'SuperSecretP@ssword1',\n        }\n      })\n    )\n  )\n")),(0,r.yg)("p",null,"The factory method ",(0,r.yg)("inlineCode",{parentName:"p"},"TakeNotes.usingASharedNotepad()")," has been removed, so if you'd like the actors to share notes, you'll need to give them the same instance of the Notepad to work with:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"}," import { Actor, Cast, Notepad, TakeNotes } from '@serenity-js/core';\n\n interface AuthCredentials {\n     username: string;\n     password: string;\n }\n\n interface MyNotes {\n     credentials: AuthCredentials;\n }\n\n export class Actors implements Cast {\n\n     // initialise a shared notepad when the Actors class is initialised\n     private readonly sharedNotepad = Notepad.with<MyNotes>({\n         credentials: {\n             username: 'test-user',\n             password: 'SuperSecretP@ssword!',\n         }\n     });\n\n     prepare(actor: Actor): Actor {\n         switch (actor.name) {\n           case 'Alice':\n           case 'Bob':\n               // Alice and Bob should share notes\n               return actor.whoCan(TakeNotes.using(this.sharedNotepad));\n           default:\n               // other actors should have their own notepads\n              return actor.whoCan(TakeNotes.using(Notepad.empty<MyNotes>()));\n         }\n     }\n }\n")),(0,r.yg)("p",null,"Another improvement is that ",(0,r.yg)("inlineCode",{parentName:"p"},"notes<T>().get(noteName)")," now returns a ",(0,r.yg)("a",{parentName:"p",href:"/api/core#QuestionAdapter"},(0,r.yg)("inlineCode",{parentName:"a"},"QuestionAdapter")),". The adapter creates a Screenplay Pattern-style proxy around the underlying value, so when you invoke its methods the adapter generates ",(0,r.yg)("inlineCode",{parentName:"p"},"Interaction"),"s and ",(0,r.yg)("inlineCode",{parentName:"p"},"Question"),"s as needed:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Log, Notepad, notes, TakeNotes } from '@serenity-js/core';\n\nactorCalled('Leonard')\n  .whoCan(\n    TakeNotes.using(Notepad.empty<MyNotes>())\n  )\n  .attemptsTo(\n    notes<MyNotes>().set('credentials', {\n        username: 'leonard@example.org',\n        password: 'SuperSecretP@ssword1',\n    }),\n    Log.the(\n      notes<MyNotes>().get('credentials') // returns QuestionAdapter<AuthCredentials>\n        .username                         // returns QuestionAdapter<string>\n        .toLocaleUpperCase()              // proxies toLocaleUpperCase and generates an Interaction around it\n        .charAt(0)                        // proxies charAt and generates a proxy, etc.\n    ), // emits \"L\"\n  )\n")),(0,r.yg)("h3",{id:"using-an-untyped-notepad"},"Using an untyped Notepad"),(0,r.yg)("p",null,"If you don't want to use the typed notepad in the first steps of your migration, you can still use an untyped version:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"}," import { Actor, Cast, Notepad, TakeNotes } from '@serenity-js/core';\n\n export class Actors implements Cast {\n\n     // initialise an empty shared notepad when the Actors class is initialised\n     private readonly sharedNotepad = Notepad.empty();\n\n     prepare(actor: Actor): Actor {\n         switch (actor.name) {\n           case 'Alice':\n           case 'Bob':\n               // Alice and Bob should share notes\n               return actor.whoCan(TakeNotes.using(this.sharedNotepad));\n           default:\n               // other actors should have their own notepads\n              return actor.whoCan(TakeNotes.using(Notepad.empty()));\n         }\n     }\n }\n")),(0,r.yg)("p",null,"You can then record and retrieve notes using your subject of choice, defined using a ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Log, Note } from '@serenity-js/core';\n\nactorCalled('Alice')\n  .attemptsTo(\n    notes().set('shopping list item', 'milk'),\n    Log.the(\n      notes().get('shopping list item')\n    ),\n  )\n")),(0,r.yg)("p",null,"The untyped flavour gives you access to ",(0,r.yg)("a",{parentName:"p",href:"/api/core#QuestionAdapter"},(0,r.yg)("inlineCode",{parentName:"a"},"QuestionAdapter")),"s just like the typed version, however your text editor might not be able to provide you with as much support as it would if your notepad had been typed."),(0,r.yg)("h2",{id:"waiting"},"Waiting"),(0,r.yg)("p",null,"In Serenity/JS 2, interactions to ",(0,r.yg)("inlineCode",{parentName:"p"},"Wait.for")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Wait.until")," relied on browser-specific wait APIs, such as Protractor ",(0,r.yg)("a",{parentName:"p",href:"https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.wait"},(0,r.yg)("inlineCode",{parentName:"a"},"wait"))," or WebdriverIO ",(0,r.yg)("a",{parentName:"p",href:"https://webdriver.io/docs/api/browser/waitUntil/"},(0,r.yg)("inlineCode",{parentName:"a"},"waitUntil")),".\nSince the interactions were specific to browser integration tools, they'd also come as part of ",(0,r.yg)("inlineCode",{parentName:"p"},"@serenity-js/protractor")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"@serenity-js/webdriverio")," modules."),(0,r.yg)("p",null,"In Serenity/JS 3, interactions to ",(0,r.yg)("inlineCode",{parentName:"p"},"Wait")," ",(0,r.yg)("strong",{parentName:"p"},"don't rely on any browser integration tool")," and are, in fact, completely browser-independent.\nWhat this means in practice is that you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"Wait")," for both browser and API tests."),(0,r.yg)("p",null,"Since ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Wait"},(0,r.yg)("inlineCode",{parentName:"a"},"Wait"))," is no longer tied to the browser, it's also been moved to ",(0,r.yg)("inlineCode",{parentName:"p"},"@serenity-js/core"),", along with ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Expectation"},(0,r.yg)("inlineCode",{parentName:"a"},"Expectation")),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"import { actorCalled, Duration } from '@serenity-js/core';\n- import { Wait } from '@serenity-js/protractor';\n- import { Wait } from '@serenity-js/webdriverio';\n+ import { Wait } from '@serenity-js/core';\n\nactorCalled('Alice').attemptsTo(\n    Wait.for(Duration.ofSeconds(1)),\n\n    Wait.until(someQuestion, someExpectation)\n        .pollingEvery(Duration.ofMilliseconds(10)),\n\n    Wait.upTo(Duration.ofSeconds(5)\n        .until(someQuestion, someExpectation)\n        .pollingEvery(Duration.ofMilliseconds(10)),\n)\n")),(0,r.yg)("p",null,"Additionally, ",(0,r.yg)("inlineCode",{parentName:"p"},"Wait.until")," has also received a new API allowing you to configure its polling interval (500ms by default):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Duration, Wait } from '@serenity-js/core';\n\nactorCalled('Alice').attemptsTo(\n    Wait.until(someQuestion, someExpectation)\n        .pollingEvery(Duration.ofMilliseconds(10)),\n)\n")),(0,r.yg)("h2",{id:"serenity-jsrest"},(0,r.yg)("inlineCode",{parentName:"h2"},"@serenity-js/rest")),(0,r.yg)("h3",{id:"answerablewithanswerablepropertiesaxiosrequestconfig-in-http-requests"},(0,r.yg)("inlineCode",{parentName:"h3"},"Answerable<WithAnswerableProperties<AxiosRequestConfig>>")," in HTTP requests"),(0,r.yg)("p",null,"All HTTP requests now accept ",(0,r.yg)("inlineCode",{parentName:"p"},"Answerable<WithAnswerableProperties<AxiosRequestConfig>>"),", which means you can now specify additional\nHTTP request configuration using a configuration object with nested ",(0,r.yg)("inlineCode",{parentName:"p"},"Question"),"s, ",(0,r.yg)("a",{parentName:"p",href:"/api/core#QuestionAdapter"},(0,r.yg)("inlineCode",{parentName:"a"},"QuestionAdapter")),"s and ",(0,r.yg)("inlineCode",{parentName:"p"},"Promise"),"s."),(0,r.yg)("p",null,"For example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Question, q } from '@serenity-js/core';\nimport { Send, PostRequest } from '@serenity-js/rest';\n\nawait actorCalled('Ren\xe9').attemptsTo(\n    Send.a(\n        PostRequest.to('/products/2')\n            .with({ name: 'apple' })\n            .using({\n                headers: {\n                    Authorization: q`Bearer ${ Question.about('token', actor => 'some-token') }`,\n                },\n            })\n    )\n);\n\n/*\n sends a request with:\n\n    headers: {\n        Authorization: 'Bearer some-token',\n    },\n */\n")),(0,r.yg)("admonition",{title:"Pro tip",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"The code sample above uses ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/q"},(0,r.yg)("inlineCode",{parentName:"a"},"q"))," a ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"},"tagged template function")," converting a ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," template parameterised with ",(0,r.yg)("a",{parentName:"p",href:"/api/core#Answerable"},(0,r.yg)("inlineCode",{parentName:"a"},"Answerable<string | number>"))," into a ",(0,r.yg)("a",{parentName:"p",href:"/api/core#QuestionAdapter"},(0,r.yg)("inlineCode",{parentName:"a"},"QuestionAdapter<string>")),". Useful when you need to quickly concatenate ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),"s and ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question"},(0,r.yg)("inlineCode",{parentName:"a"},"Question<string>")),".")),(0,r.yg)("h3",{id:"removed-deprecated-changeapiurl"},"Removed deprecated ",(0,r.yg)("inlineCode",{parentName:"h3"},"ChangeApiUrl")),(0,r.yg)("p",null,"Deprecated interaction to ",(0,r.yg)("inlineCode",{parentName:"p"},"ChangeApiUrl")," is now replaced by ",(0,r.yg)("a",{parentName:"p",href:"/api/rest/class/ChangeApiConfig#setUrlTo"},(0,r.yg)("inlineCode",{parentName:"a"},"ChangeApiConfig.setUrlTo(newBaseUrl)"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"actor.attemptsTo(\n-    ChangeApiUrl.to(newBaseUrl),\n+    ChangeApiConfig.setUrlTo(newBaseUrl),\n);\n\n")),(0,r.yg)("h2",{id:"serenity-jscore"},(0,r.yg)("inlineCode",{parentName:"h2"},"@serenity-js/core")),(0,r.yg)("h3",{id:"screenplay-style-dictionaries-with-questionfromobject"},"Screenplay-style dictionaries with ",(0,r.yg)("inlineCode",{parentName:"h3"},"Question.fromObject")),(0,r.yg)("p",null,"A new Screenplay-style data structure, ",(0,r.yg)("inlineCode",{parentName:"p"},"Answerable<WithAnswerableProperties<Source_Type>>")," will help you convert\nand merge plain JavaScript objects with nested ",(0,r.yg)("a",{parentName:"p",href:"/api/core#Answerable"},(0,r.yg)("inlineCode",{parentName:"a"},"Answerable"),"s")," into a ",(0,r.yg)("inlineCode",{parentName:"p"},"QuestionAdapter<T>"),"."),(0,r.yg)("p",null,"For example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"\nimport { actorCalled } from '@serenity-js/core';\nimport { Send, PostRequest } from '@serenity-js/rest';\n\ninterface AddProductRequestData {\n    name:       string;\n    quantity:   number;\n}\n\nactorCalled('Ren\xe9').attemptsTo(\n    Send.a(\n        PostRequest.to('/products')\n            .with(\n                Question.fromObject<AddProductRequestData>({\n                    name:       Text.of(someElement),\n                    quantity:   Text.of(someOtherElement).as(Number)\n                })\n            )\n    )\n);\n")),(0,r.yg)("p",null,"To merge several objects, pass them to ",(0,r.yg)("inlineCode",{parentName:"p"},"Question.fromObject")," as per the example below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"Question.fromObject<AddProductRequestData>(\n    // initial values\n    { name: 'unknown', quantity: 0 },\n    // overrides\n    { name: Text.of(someElement) },\n    // other overrides\n    { quantity: Text.of(someOtherElement).as(Number) },\n)\n")),(0,r.yg)("p",null,"Note that in the above code sample, the first object contains values for all the fields\nrequired by ",(0,r.yg)("inlineCode",{parentName:"p"},"AddProductRequestData")," interface."),(0,r.yg)("p",null,"If not all the fields are required, make sure to mark them\nas ",(0,r.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties"},"optional"),"."),(0,r.yg)("p",null,"For example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"interface AddProductRequestData {\n    name:       string;\n    quantity?:  number; // optional\n}\n")),(0,r.yg)("h3",{id:"formatting-descriptions-with-d-and-f"},"Formatting descriptions with ",(0,r.yg)("inlineCode",{parentName:"h3"},"d")," and ",(0,r.yg)("inlineCode",{parentName:"h3"},"f")),(0,r.yg)("p",null,"Deprecated ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"},"tag function")," ",(0,r.yg)("inlineCode",{parentName:"p"},"formatted")," has been removed and replaced by ",(0,r.yg)("inlineCode",{parentName:"p"},"d"),' (short for "description") and ',(0,r.yg)("inlineCode",{parentName:"p"},"f"),' (short for "format"):'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"- import { formatted } from '@serenity-js/core/lib/io';\n+ import { f, d } from '@serenity-js/core/lib/io';\n\nconst AuthenticateAs = (username: Answerable<string>) =>\n-    Task.where(formatted `#actor authenticates as ${ username }`, /* ... */)\n+    Task.where(d `#actor authenticates as ${ username }`, /* ... */)\n")),(0,r.yg)("p",null,"While both the ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/d"},(0,r.yg)("inlineCode",{parentName:"a"},"d"))," and ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/f"},(0,r.yg)("inlineCode",{parentName:"a"},"f"))," tag functions can be used\nto format the descriptions of custom tasks, interactions and questions,\nthe difference between them is how they format ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question"},(0,r.yg)("inlineCode",{parentName:"a"},"Question"),"s")," provided as template parameter:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"f")," marks the question parameter so that it's easy to distinguish in the description"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"d")," makes the question parameter blend in with the rest of the description")),(0,r.yg)("p",null,"For example, given a custom question as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"const testUsername = () =>\n    Question.about('test username', actor => `${ actor.name }@example.org`)\n")),(0,r.yg)("p",null,"Calling ",(0,r.yg)("inlineCode",{parentName:"p"},"d"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"    d`#actor authenticates as ${ testUsername() }`\n    // produces: #actor authenticates as test username\n")),(0,r.yg)("p",null,"Calling ",(0,r.yg)("inlineCode",{parentName:"p"},"f"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"    f`#actor authenticates as ${ testUsername() }`\n    // produces: #actor authenticates as <<test username>>\n")),(0,r.yg)("h2",{id:"serenity-jsweb"},(0,r.yg)("inlineCode",{parentName:"h2"},"@serenity-js/web")),(0,r.yg)("p",null,"Other changes in the Serenity/JS Web module include:"),(0,r.yg)("h3",{id:"page-specific-functions"},"Page-specific functions"),(0,r.yg)("p",null,"Web page specific functions such as ",(0,r.yg)("inlineCode",{parentName:"p"},"Website.url()")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Website.title()")," are now aggregated under the ",(0,r.yg)("a",{parentName:"p",href:"/api/web/class/Page"},(0,r.yg)("inlineCode",{parentName:"a"},"Page"))," API:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"- import { Website } from '@serenity-js/webdriverio`\n+ import { Page } from '@serenity-js/web`\n\nawait actorCalled('Alice').attemptsTo(\n-    Ensure.that(Website.title(), equals('Serenity/JS')),\n+    Ensure.that(Page.current().title(), equals('Serenity/JS')),\n)\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("a",{parentName:"p",href:"/api/web/class/Page"},(0,r.yg)("inlineCode",{parentName:"a"},"Page"))," API also allows you to easily query properties of another browser window without interrupting\nthe actor flow:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Page } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n  Ensure.that(\n    Page.whichUrl(endWith(`/gallery.html`)).title(),\n    equals('Summer collection')\n  ),\n)\n")),(0,r.yg)("p",null,"You can also use it to switch to another tab and make the actor perform a sequence of interactions in that context:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { endsWith } from '@serenity-js/assertions'\nimport { actorCalled } from '@serenity-js/core'\nimport { Page, Switch } from '@serenity-js/web'\n\nawait actorCalled('Bernie').attemptsTo(\n  Switch.to(Page.whichUrl(endsWith(`/gallery.html`))).and(\n      // perform verification of the gallery page\n  ),\n  // automatically switch back to the original window\n)\n")),(0,r.yg)("h2",{id:"your-feedback-matters"},"Your feedback matters!"),(0,r.yg)("p",null,"If you like Serenity/JS, ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js"},"give it a \u2b50 star on GitHub")," and tell your friends about it!\nFor questions about Serenity/JS, check out ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/orgs/serenity-js/discussions/categories/how-do-i"},"Serenity/JS Q'n'A"),",\nand make sure to join our ",(0,r.yg)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},"Serenity/JS Community Chat")," to say hi \ud83d\udc4b"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/github/stars/serenity-js/serenity-js",alt:"GitHub stars"})),"\n",(0,r.yg)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Serenity%2FJS-Q'n'A-FBD30B?logo=github",alt:"Join Serenity/JS Community Chat"})),"\n",(0,r.yg)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix",alt:"Join Serenity/JS Community Chat"}))),(0,r.yg)("p",null,"New tutorials and videos are coming soon, follow us on ",(0,r.yg)("a",{parentName:"p",href:"https://www.linkedin.com/company/serenity-js"},"LinkedIn")," and subscribe to ",(0,r.yg)("a",{parentName:"p",href:"https://www.youtube.com/channel/UC0RdeVPyjtJopVHvlLrXd1Q"},"Serenity/JS YouTube channel")," to get notified when they're available!"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.linkedin.com/company/serenity-js"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Follow%20Serenity%2FJS-0077B5?style=for-the-badge&logo=linkedin&logoColor=white",alt:"LinkedIn Follow"})),"\n",(0,r.yg)("a",{parentName:"p",href:"https://www.youtube.com/@serenity-js"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Watch%20@serenity--js-E62117?style=for-the-badge&logo=youtube&logoColor=white",alt:"YouTube Follow"})),"\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/sponsors/serenity-js"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white",alt:"GitHub Sponsors"}))))}d.isMDXComponent=!0}}]);