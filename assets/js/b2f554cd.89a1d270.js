"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[11477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"support-for-webdriverio-8","metadata":{"permalink":"/blog/support-for-webdriverio-8","editUrl":"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/blog/2023-05-10-support-for-webdriverio-8/index.md","source":"@site/blog/2023-05-10-support-for-webdriverio-8/index.md","title":"Support for WebdriverIO 8","description":"WebdriverIO Roboter","date":"2023-05-10T00:00:00.000Z","formattedDate":"May 10, 2023","tags":[{"label":"web","permalink":"/blog/tags/web"},{"label":"webdriverio","permalink":"/blog/tags/webdriverio"},{"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":5.505,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak"}],"frontMatter":{"slug":"support-for-webdriverio-8","title":"Support for WebdriverIO 8","authors":["jan-molak"],"tags":["web","webdriverio","open-source"]},"nextItem":{"title":"Test Automation Summit, Berlin 2022","permalink":"/blog/test-automation-summit-berlin"}},"content":"![WebdriverIO Roboter](./webdriverio-roboter.png)\\n\\nSerenity/JS started to support WebdriverIO in version 2.30.0. \\n\\nIn version 3.0.0, Serenity/JS brought you [`@serenity-js/web`](/handbook/web-testing/) - a portable abstraction\\nlayer that lets you run the exact same web scenario with [WebdriverIO](/api/webdriverio), [Playwright](/api/playwright), and even [Protractor](/api/protractor)!\\n\\nNow, we\'re taking things further with [**Serenity/JS 3.2.0**](/changelog/3.2.0) introducing support for the latest and greatest **WebdriverIO 8**! \ud83e\udd73 \\n\\nIn this article, and in **less than 5 minutes**, you\'ll learn how to **integrate Serenity/JS** with your WebdriverIO test suite, **enable Serenity BDD reports**, and start using the **Screenplay Pattern**!\\n\\n\x3c!--truncate--\x3e\\n\\n## About Serenity/JS\\n\\n[Serenity/JS](https://serenity-js.org) is an open-source framework designed to make acceptance and regression testing of complex software systems faster, more collaborative, and easier to scale.\\n  \\nFor WebdriverIO test suites, Serenity/JS offers:\\n- [Enhanced Reporting](/handbook/reporting/) - You can use Serenity/JS\\n  as a drop-in replacement of any built-in WebdriverIO framework to produce in-depth test execution reports and living documentation of your project.\\n- [Screenplay Pattern APIs](/handbook/design/screenplay-pattern/) - To make your test code portable and reusable across projects and teams,\\n  Serenity/JS gives you an optional [abstraction layer](/api/webdriverio) on top of native WebdriverIO APIs.\\n- [Integration Libraries](/api/core/) - For test suites that follow the Screenplay Pattern,\\n  Serenity/JS also provides optional integration libraries to help you write [API tests](/api/rest/),\\n  [manage local servers](/api/local-server/), [perform assertions](/api/assertions/), and more!\\n\\n![Serenity BDD Report Example](/images/reporting/serenity-bdd-reporter.png)\\n\\n## Installing Serenity/JS\\n\\nTo add Serenity/JS to an [existing WebdriverIO project](https://webdriver.io/docs/gettingstarted), install the following Serenity/JS modules from NPM:\\n\\n```sh npm2yarn\\nnpm install @serenity-js/{core,web,webdriverio,assertions,console-reporter,serenity-bdd} --save-dev\\n```\\n\\nLearn more about Serenity/JS modules:\\n- [`@serenity-js/core`](/api/core/)\\n- [`@serenity-js/web`](/api/web/)\\n- [`@serenity-js/webdriverio`](/api/webdriverio/)\\n- [`@serenity-js/assertions`](/api/assertions/)\\n- [`@serenity-js/console-reporter`](/api/console-reporter/)\\n- [`@serenity-js/serenity-bdd`](/api/serenity-bdd/)\\n\\n## Configuring Serenity/JS and WebdriverIO\\n\\nTo enable integration with Serenity/JS, configure WebdriverIO as follows:\\n\\n<Tabs>\\n<TabItem value=\\"wdio-conf-typescript\\" label=\\"TypeScript\\" default>\\n\\n```typescript title=\\"wdio.conf.ts\\"\\nimport { WebdriverIOConfig } from \'@serenity-js/webdriverio\';\\n\\nexport const config: WebdriverIOConfig = {\\n\\n    // Tell WebdriverIO to use Serenity/JS framework\\n    framework: \'@serenity-js/webdriverio\',\\n\\n    // Serenity/JS configuration\\n    serenity: {\\n        // Configure Serenity/JS to use the appropriate adapter\\n        // for your test runner\\n        runner: \'cucumber\', // or \'mocha\', or \'jasmine\'\\n\\n        // Register Serenity/JS reporting services, a.k.a. the \\"stage crew\\"\\n        crew: [\\n            // Optional, print test execution results to standard output\\n            \'@serenity-js/console-reporter\',\\n\\n            // Optional, produce Serenity BDD reports\\n            // and living documentation (HTML)\\n            \'@serenity-js/serenity-bdd\',\\n            [ \'@serenity-js/core:ArtifactArchiver\', {\\n                outputDirectory: \'target/site/serenity\' \\n            } ],\\n\\n            // Optional, automatically capture screenshots\\n            // upon interaction failure\\n            [ \'@serenity-js/web:Photographer\', {\\n                strategy: \'TakePhotosOfFailures\'\\n            } ],\\n        ]\\n    },\\n\\n    // Configure your Cucumber runner\\n    cucumberOpts: {\\n        // see Cucumber configuration options below\\n    },\\n\\n\\n    // ... or Jasmine runner\\n    jasmineOpts: {\\n        // see Jasmine configuration options below\\n    },\\n\\n    // ... or Mocha runner\\n    mochaOpts: {\\n        // see Mocha configuration options below\\n    },\\n\\n    runner: \'local\',\\n\\n    // Any other WebdriverIO configuration\\n};\\n```\\n\\n</TabItem>\\n<TabItem value=\\"wdio-conf-javascript\\" label=\\"JavaScript\\">\\n\\n```typescript title=\\"wdio.conf.js\\"\\nexport const config = {\\n\\n    // Tell WebdriverIO to use Serenity/JS framework\\n    framework: \'@serenity-js/webdriverio\',\\n\\n    // Serenity/JS configuration\\n    serenity: {\\n        // Configure Serenity/JS to use the appropriate adapter for your test runner\\n        runner: \'cucumber\',\\n        // runner: \'mocha\',\\n        // runner: \'jasmine\',\\n\\n        // Register Serenity/JS reporting services, a.k.a. the \\"stage crew\\"\\n        crew: [\\n            \'@serenity-js/console-reporter\',\\n            \'@serenity-js/serenity-bdd\',\\n            [ \'@serenity-js/core:ArtifactArchiver\', { outputDirectory: \'target/site/serenity\' } ],\\n            [ \'@serenity-js/web:Photographer\', { strategy: \'TakePhotosOfFailures\' } ],\\n        ]\\n    },\\n\\n    // Configure your Cucumber runner\\n    cucumberOpts: {\\n        // see Cucumber configuration options below\\n    },\\n\\n\\n    // ... or Jasmine runner\\n    jasmineOpts: {\\n        // see Jasmine configuration options below\\n    },\\n\\n    // ... or Mocha runner\\n    mochaOpts: {\\n        // see Mocha configuration options below\\n    },\\n\\n    runner: \'local\',\\n\\n    // Any other WebdriverIO configuration\\n};\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nLearn more about:\\n- [Serenity/JS Cucumber configuration options](/api/cucumber-adapter/interface/CucumberConfig/)\\n- [Serenity/JS Jasmine configuration options](/api/jasmine-adapter/interface/JasmineConfig/)\\n- [Serenity/JS Mocha configuration options](/api/mocha-adapter/interface/MochaConfig/)\\n- [WebdriverIO configuration file](https://webdriver.io/docs/configurationfile/)\\n\\n## Producing Serenity BDD reports and living documentation\\n\\n[Serenity BDD reports and living documentation](https://serenity-bdd.github.io/docs/reporting/the_serenity_reports) are generated by [Serenity BDD CLI](https://github.com/serenity-bdd/serenity-core/tree/main/serenity-cli),\\na Java program downloaded and managed by the [`@serenity-js/serenity-bdd`](/api/serenity-bdd/) module.\\n\\nTo produce Serenity BDD reports, your test suite must:\\n- download the Serenity BDD CLI, by calling `serenity-bdd update` which caches the CLI `jar` locally\\n- produce intermediate Serenity BDD `.json` reports, by registering [`SerenityBDDReporter`](/api/serenity-bdd/class/SerenityBDDReporter/) as per the [configuration instructions](#configuring-serenityjs)\\n- invoke the Serenity BDD CLI when you want to produce the report, by calling `serenity-bdd run`\\n\\nThe pattern used by all the [Serenity/JS Project Templates](/handbook/getting-started#serenityjs-project-templates) relies\\non using:\\n- a [`postinstall`](https://docs.npmjs.com/cli/v9/using-npm/scripts#life-cycle-operation-order) NPM script to download the Serenity BDD CLI\\n- [`npm-failsafe`](https://www.npmjs.com/package/npm-failsafe) to run the reporting process even if the test suite itself has failed (which is precisely when you need test reports the most...).\\n- [`rimraf`](https://www.npmjs.com/package/rimraf) as a convenience method to remove any test reports left over from the previous run\\n\\n```json title=\\"package.json\\"\\n{\\n  \\"scripts\\": {\\n    \\"postinstall\\": \\"serenity-bdd update\\",\\n    \\"clean\\": \\"rimraf target\\",\\n    \\"test\\": \\"failsafe clean test:execute test:report\\",\\n    \\"test:execute\\": \\"wdio wdio.conf.ts\\",\\n    \\"test:report\\": \\"serenity-bdd run\\"\\n  }\\n}\\n```\\n\\nTo learn more about the `SerenityBDDReporter`, please consult:\\n- installation instructions in [`@serenity-js/serenity-bdd` documentation](/api/serenity-bdd/),\\n- configuration examples in [`SerenityBDDReporter` API docs](/api/serenity-bdd/class/SerenityBDDReporter/),\\n- [Serenity/JS examples on GitHub](https://github.com/serenity-js/serenity-js/tree/main/examples).\\n\\n## Using Serenity/JS Screenplay Pattern APIs\\n\\nThe [Screenplay Pattern](/handbook/design/screenplay-pattern/) is an innovative, user-centred approach to writing high-quality automated acceptance tests. It steers you towards an effective use of layers of abstraction,\\nhelps your test scenarios capture the business vernacular of your domain, and encourages good testing and software engineering habits on your team.\\n\\nBy default, when you register `@serenity-js/webdriverio` as your WebdriverIO `framework`,\\nSerenity/JS configures a default [cast](/api/core/class/Cast/) of [actors](/api/core/class/Actor/),\\nwhere every actor can:\\n- [`BrowseTheWebWithWebdriverIO`](/api/webdriverio/class/BrowseTheWebWithWebdriverIO/)\\n- [`TakeNotes.usingAnEmptyNotepad()`](/api/core/class/TakeNotes/)\\n\\nThis should be enough to help you get started with introducing test scenarios that follow the Screenplay Pattern even to an existing test suite, for example:\\n\\n```typescript title=\\"specs/example.spec.ts\\"\\nimport { actorCalled } from \'@serenity-js/core\'\\nimport { Navigate, Page } from \'@serenity-js/web\'\\nimport { Ensure, equals } from \'@serenity-js/assertions\'\\n\\ndescribe(\'My awesome website\', () => {\\n    it(\'can have test scenarios that follow the Screenplay Pattern\', async () => {\\n        await actorCalled(\'Alice\').attemptsTo(\\n            Navigate.to(`https://webdriver.io`),\\n            Ensure.that(\\n                Page.current().title(),\\n                equals(`WebdriverIO \xb7 Next-gen browser and mobile automation test framework for Node.js | WebdriverIO`)\\n            ),\\n        )\\n    })\\n\\n    it(\'can have non-Screenplay scenarios too\', async () => {\\n        await browser.url(\'https://webdriver.io\')\\n        await expect(browser)\\n            .toHaveTitle(\'WebdriverIO \xb7 Next-gen browser and mobile automation test framework for Node.js | WebdriverIO\')\\n    })\\n})\\n```\\n\\nTo learn more about the Screenplay Pattern, check out:\\n- [The Screenplay Pattern](/handbook/design/screenplay-pattern/)\\n- [Web testing with Serenity/JS](/handbook/web-testing/)\\n- [\\"BDD in Action, Second Edition\\"](https://www.manning.com/books/bdd-in-action-second-edition)\\n\\n## Next steps\\n\\nWell done, your WebdriverIO test suite is now integrated with Serenity/JS! \ud83c\udf89\ud83c\udf89\ud83c\udf89\\n\\nTo take things further, check out:\\n- [Web testing with Serenity/JS](/handbook/web-testing/)\\n- [Serenity/JS examples on GitHub](https://github.com/serenity-js/serenity-js/tree/main/examples/)\\n- [Serenity/JS WebdriverIO project templates](https://github.com/serenity-js?q=webdriverio-template&type=all&language=&sort=)\\n- [Serenity/JS API docs](/api/web/)\\n\\nRemember, new features, tutorials, and demos are coming soon!\\nFollow [Serenity/JS on LinkedIn](https://www.linkedin.com/company/serenity-js),\\nsubscribe to [Serenity/JS channel on YouTube](https://www.youtube.com/@serenity-js) and join the [Serenity/JS Community Chat](https://matrix.to/#/#serenity-js:gitter.im) to stay up to date!\\nPlease also make sure to star \u2b50\ufe0f [Serenity/JS on GitHub](https://github.com/serenity-js/serenity-js) to help others discover the framework!\\n\\n[![Follow Serenity/JS on LinkedIn](https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin)](https://www.linkedin.com/company/serenity-js)\\n[![Watch Serenity/JS on YouTube](https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube)](https://www.youtube.com/@serenity-js)\\n[![Join Serenity/JS Community Chat](https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix)](https://matrix.to/#/#serenity-js:gitter.im)\\n[![GitHub stars](https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge)](https://github.com/serenity-js/serenity-js)"},{"id":"test-automation-summit-berlin","metadata":{"permalink":"/blog/test-automation-summit-berlin","editUrl":"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/blog/2022-08-29-test-automation-summit-berlin/index.md","source":"@site/blog/2022-08-29-test-automation-summit-berlin/index.md","title":"Test Automation Summit, Berlin 2022","description":"Test Automation Summit, Berlin 2022","date":"2022-08-29T00:00:00.000Z","formattedDate":"August 29, 2022","tags":[{"label":"conference","permalink":"/blog/tags/conference"},{"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":4.25,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak"}],"frontMatter":{"slug":"test-automation-summit-berlin","title":"Test Automation Summit, Berlin 2022","authors":["jan-molak"],"tags":["conference","open-source"]},"prevItem":{"title":"Support for WebdriverIO 8","permalink":"/blog/support-for-webdriverio-8"}},"content":"![Test Automation Summit, Berlin 2022](./tas-berlin.png)\\n\\nWhen Titus Fortner ([@titusfortner](https://twitter.com/titusfortner)), the maintainer of [Watir](https://www.selenium.dev/blog/2022/test-automation-summit/) and a contributor to [Selenium](https://www.selenium.dev/), messaged me on Twitter two months ago, I knew something interesting was coming.\\n\\nTitus and I never met in person. In fact, I have never met most of the other open-source maintainers I\'ve worked with over the last ten years since I became an open-source maintainer myself and the last six years I spent working on [Serenity/JS](https://serenity-js.org).\\n\\nThis is not that surprising, to be fair. After all, have you ever met any of the people maintaining the open-source libraries and frameworks that _your work_ depends on?\\n\\nWell, in my case, this was about to change.\\n\\n\x3c!--truncate--\x3e\\n\\nWhat Titus had in mind was what became the very first [Test Automation Summit](https://www.selenium.dev/blog/2022/test-automation-summit/) - a way to help the maintainers of all the various free open-source projects facilitating web-based testing to connect better and collaborate more effectively.\\n\\nAs you might have expected, as soon as I heard _test automation_, _collaboration_ and _open source_ all in one sentence, I immediately said \\"yes!\\" \\n\\nIt wasn\'t going to be yet another Zoom call or a meetup at the local pub.\\nNo. On the contrary, what Titus envisioned was a number of working sessions over the course of several days where the open-source maintainers and representatives of the development teams behind the major web browsers look into answering several important questions:\\n- **How can we make it easier for developers to get into test automation**, and more importantly - **how can we help them do it well?** Test automation is a complex and ever-evolving domain and, let\'s face it, not the primary focus of most developers trying to get their product features shipped under tight deadlines. Even worse, there is plenty of poor advice on the Internet and many companies selling [snake oil](https://en.wikipedia.org/wiki/Snake_oil) and commercial tools that promote bad practices.\\n- **How can we make it easier for open-source projects to onboard contributors and maintainers?** Maintaining free open-source software is _much_ more work than most developers imagine and typically requires **10-40 hours per week per maintainer** **_on top_** of our regular day jobs. To put things in perspective, there are [**83 million developers**](https://en.wikipedia.org/wiki/GitHub) registered on GitHub, and **less than 100 core maintainers** who support the major test automation tools most of us rely on every day to get our work done. And I didn\'t miss a zero or few there, I\'m afraid, **less than one hundred**.\\n- So given the limited resources, **how can we be more effective as a test automation community?** Many open-source automation tools provide similar or overlapping features, and the documentation we provide to the users is vast and often challenging for newcomers to navigate. Those issues often confuse the users trying to pick the \\"right tool for the job\\". They also make beginners gravitate towards the \\"batteries included\\" commercial tools, which are technologically inferior and typically result in increased maintenance costs but tend to offer a better user experience, polished marketing, and require fewer choices and less experience.  \\n- And lastly, **what can the browsers do to make testing web applications easier?** Over the last decade, web applications have become increasingly complex and steadily replaced the more traditional desktop-based applications. web browsers have also become more sophisticated than ever, and it\'s often easier to think of them as _operating systems_ than just something that \\"renders a page\\". Even though all popular browsers nowadays provide drivers supporting the [WebDriver protocol](https://www.w3.org/TR/webdriver2/), Chromium-based browsers also support the [Chrome DevTools protocol](https://chromedevtools.github.io/devtools-protocol/). This new protocol offers greater browser control but is also much more chatty and impractical when used with remote test grids (which you\'d use for cross-browser and native mobile testing). So how can we have both **greater control** _and_ **greater versatility**?\\n\\nApart from trying to find answers to those questions, we also had an opportunity to present the open-source projects we are working on. In the many conversations we had with other maintainers, we also shared the challenges we face and the ways we have found to overcome them.\\n\\nThose challenges ranged from **technical challenges** of running a software project: How do you keep dependencies up to date? What security checks do you have in place? How do you protect your users from breaking changes? What\'s your PR process like? \\n\\nThrough **legal challenges**: How do you protect your intellectual property and brand? How do you protect the rights of your contributors? How do you keep your community safe and inclusive? \\n\\nAll the way to **challenges with funding**: How do you fund your project? How do you find sponsors? How do you make your project sustainable? Is selling your work to one of the \\"big players\\" the only way to go?\\n\\nOver those couple of days in Berlin, I had the great pleasure of learning from and exchanging ideas with the leaders of some of the most successful free open-source test automation projects.\\n\\nWatch this space \ud83d\ude0e\\n\\nJan\\n\\n![Test Automation Summit, Berlin 2022, Maintainers](./tas-berlin-maintainers.jpeg)\\n\\n_Huge thanks to the [Software Freedom Conservancy](https://sfconservancy.org/) for sponsoring my travel to the event and to [SauceLabs](https://saucelabs.com/) for sponsoring the office space in Berlin!_"}]}')}}]);