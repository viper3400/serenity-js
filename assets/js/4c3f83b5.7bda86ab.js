"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[7579],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},45458:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>a,toc:()=>s});var r=n(7896),i=(n(2784),n(30876));const a={},o=void 0,s=[{value:"Serenity/JS Assertions",id:"serenityjs-assertions",level:2},{value:"Installation",id:"installation",level:3},{value:"Performing verifications using <code>Ensure</code>",id:"performing-verifications-using-ensure",level:3},{value:"Controlling execution flow using <code>Check</code>",id:"controlling-execution-flow-using-check",level:3},{value:"Synchronising the test with the System Under Test using <code>Wait</code>",id:"synchronising-the-test-with-the-system-under-test-using-wait",level:3},{value:"Defining custom expectations using <code>Expectation.thatActualShould</code>",id:"defining-custom-expectations-using-expectationthatactualshould",level:3},{value:"Composing expectations using <code>Expectation.to</code>",id:"composing-expectations-using-expectationto",level:3}],l={toc:s},c="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.linkedin.com/company/serenity-js"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin",alt:"Follow Serenity/JS on LinkedIn"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/@serenity-js"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube",alt:"Watch Serenity/JS on YouTube"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix",alt:"Join Serenity/JS Community Chat"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sponsors/serenity-js"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Support-@serenity--js-703EC8?logo=github",alt:"Support Serenity/JS on GitHub"}))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://serenity-js.org"},"Serenity/JS")," is an innovative framework designed to make acceptance and regression testing\nof complex software systems faster, more collaborative and easier to scale."),(0,i.kt)("p",null,"To get started, check out the comprehensive ",(0,i.kt)("a",{parentName:"p",href:"https://serenity-js.org/handbook"},"Serenity/JS Handbook"),", ",(0,i.kt)("a",{parentName:"p",href:"https://serenity-js.org/api/core"},"API documentation"),", and ",(0,i.kt)("a",{parentName:"p",href:"https://serenity-js.org/handbook/getting-started#serenityjs-project-templates"},"Serenity/JS project templates on GitHub"),"."),(0,i.kt)("p",null,"If you have any questions or just want to say hello, join the ",(0,i.kt)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},"Serenity/JS Community Chat"),"."),(0,i.kt)("h2",{id:"serenityjs-assertions"},"Serenity/JS Assertions"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://serenity-js.org/modules/rest/"},(0,i.kt)("inlineCode",{parentName:"a"},"@serenity-js/assertions"))," is an assertions library implementing the ",(0,i.kt)("a",{parentName:"p",href:"https://serenity-js.org/handbook/thinking-in-serenity-js/screenplay-pattern.html"},"Screenplay Pattern"),"."),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"To install this module, run the following command in your computer terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"npm install --save-dev @serenity-js/{core,assertions}\n")),(0,i.kt)("h3",{id:"performing-verifications-using-ensure"},"Performing verifications using ",(0,i.kt)("inlineCode",{parentName:"h3"},"Ensure")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Ensure, endsWith } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\nimport { Navigate, Page } from '@serenity-js/web';\n\nawait actorCalled('Erica').attemptsTo(\n    Navigate.to('https://serenity-js.org'),\n    Ensure.that(\n        Page.current().title(), \n        endsWith('Serenity/JS')\n    ),\n);\n")),(0,i.kt)("h3",{id:"controlling-execution-flow-using-check"},"Controlling execution flow using ",(0,i.kt)("inlineCode",{parentName:"h3"},"Check")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core';\nimport { Check } from '@serenity-js/assertions'; \nimport { Click, isVisible } from '@serenity-js/protractor';\n\nawait actorCalled('Erica').attemptsTo(\n    Check.whether(NewsletterModal, isVisible())\n        .andIfSo(Click.on(CloseModalButton)),\n);\n")),(0,i.kt)("h3",{id:"synchronising-the-test-with-the-system-under-test-using-wait"},"Synchronising the test with the System Under Test using ",(0,i.kt)("inlineCode",{parentName:"h3"},"Wait")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core';\nimport { Click, isVisible, Wait } from '@serenity-js/protractor';\n\nawait actorCalled('Erica').attemptsTo(\n    Wait.until(CloseModalButton, isVisible()),\n    Click.on(CloseModalButton)\n);\n")),(0,i.kt)("h3",{id:"defining-custom-expectations-using-expectationthatactualshould"},"Defining custom expectations using ",(0,i.kt)("inlineCode",{parentName:"h3"},"Expectation.thatActualShould")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core';\nimport { Expectation, Ensure } from '@serenity-js/assertions';\n\nfunction isDivisibleBy(expected: Answerable<number>): Expectation<number> {\n    return Expectation.thatActualShould<number, number>('have value divisible by', expected)\n        .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);\n}\n\nawait actorCalled('Erica').attemptsTo(\n    Ensure.that(4, isDivisibleBy(2)),\n);\n")),(0,i.kt)("h3",{id:"composing-expectations-using-expectationto"},"Composing expectations using ",(0,i.kt)("inlineCode",{parentName:"h3"},"Expectation.to")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core';\nimport { Expectation, Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions';\n\nfunction isWithin(lowerBound: number, upperBound: number) {\n    return Expectation\n        .to(`have value within ${ lowerBound } and ${ upperBound }`)\n        .soThatActual(and(\n           or(isGreaterThan(lowerBound), equals(lowerBound)),\n           or(isLessThan(upperBound), equals(upperBound)),\n        ));\n}\n\nawait actorCalled('Erica').attemptsTo(\n    Ensure.that(5, isWithin(3, 6)),\n);\n")))}p.isMDXComponent=!0}}]);