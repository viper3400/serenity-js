"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[943],{82247:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>d});var a=n(14041);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),g=r,d=m["".concat(c,".").concat(g)]||m[g]||y[g]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},20605:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(89575),r=(n(14041),n(82247));const o={sidebar_position:6},i="Control flow",s={unversionedId:"design/control-flow",id:"design/control-flow",title:"Control flow",description:"Serenity/JS introduces idiomatic control flow constructs to support implementing conditional and repeated activities in your Screenplay Pattern scenarios.",source:"@site/docs/design/control-flow.mdx",sourceDirName:"design",slug:"/design/control-flow",permalink:"/handbook/design/control-flow",draft:!1,editUrl:"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/docs/design/control-flow.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docs",previous:{title:"Debugging",permalink:"/handbook/design/debugging"},next:{title:"Data structures",permalink:"/handbook/design/data-structures"}},c={},l=[{value:"Conditional statements",id:"conditional-statements",level:2},{value:"Loops",id:"loops",level:2},{value:"Iterating over a static Array",id:"iterating-over-a-static-array",level:3},{value:"Iterating over REST API responses",id:"iterating-over-rest-api-responses",level:3},{value:"Iterating over web UI elements",id:"iterating-over-web-ui-elements",level:3},{value:"Synchronisation caveats",id:"synchronisation-caveats",level:3}],p={toc:l},m="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"control-flow"},"Control flow"),(0,r.yg)("p",null,"Serenity/JS introduces idiomatic control flow constructs to support implementing conditional and repeated ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Activity"},"activities")," in your ",(0,r.yg)("a",{parentName:"p",href:"/handbook/design/screenplay-pattern"},"Screenplay Pattern")," scenarios."),(0,r.yg)("p",null,"Consistently with the design of Serenity/JS ",(0,r.yg)("a",{parentName:"p",href:"/handbook/design/assertions"},"assertions")," and ",(0,r.yg)("a",{parentName:"p",href:"/handbook/design/waiting-and-synchronisation"},"synchronisation statements"),",\nall the Serenity/JS control flow statements rely on reusable ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Expectation"},"expectations"),"."),(0,r.yg)("h2",{id:"conditional-statements"},"Conditional statements"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Check"},(0,r.yg)("inlineCode",{parentName:"a"},"Check.whether"))," is the Serenity/JS equivalent of an ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"},(0,r.yg)("inlineCode",{parentName:"a"},"if...else"))," statement."),(0,r.yg)("p",null,"However, while ",(0,r.yg)("inlineCode",{parentName:"p"},"if...else")," is a construct limited to operating on static values, ",(0,r.yg)("inlineCode",{parentName:"p"},"Check.whether")," evaluates\nthe provided value dynamically in the context of the given actor:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Check } from '@serenity-js/core'\nimport { PageElement, By, isVisible, Click } from '@serenity-js/web'\n\nclass CookieConsent {\n    static banner = () =>\n        PageElement.located(By.id('cookie-consent'))\n            .describedAs('cookie consent banner')\n\n    static closeButton = () =>\n        PageElement.located(By.css('.close'))\n            .describedAs('close button')\n            .of(this.banner())\n}\n\nawait actorCalled('Chuck').attemptsTo(\n    Check.whether(CookieConsent.banner(), isVisible())\n        .andIfSo(\n            Click.on(CookieConsent.closeButton()),\n        )\n)\n")),(0,r.yg)("p",null,"Optionally, the interaction to ",(0,r.yg)("inlineCode",{parentName:"p"},"Check")," can also define the ",(0,r.yg)("strong",{parentName:"p"},"alternative activities"),"\nto perform when the condition is not met:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Check, Log } from '@serenity-js/core'\nimport { isVisible, Click } from '@serenity-js/web'\n\nawait actorCalled('Chuck').attemptsTo(\n    Check.whether(CookieConsent.banner(), isVisible())\n        .andIfSo(\n            Click.on(CookieConsent.closeButton()),\n        )\n        .otherwise(\n            Log.the('Cookies already accepted')\n        )\n")),(0,r.yg)("h2",{id:"loops"},"Loops"),(0,r.yg)("p",null,"Serenity/JS ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/List"},(0,r.yg)("inlineCode",{parentName:"a"},"List")),"\noffers a ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/List#forEach"},(0,r.yg)("inlineCode",{parentName:"a"},"forEach"))," method that"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"enables actors to iterate over synchronous and asynchronous collections,"),(0,r.yg)("li",{parentName:"ul"},"provides access to the actor iterating over the list as well as the item accessed in the current iteration"),(0,r.yg)("li",{parentName:"ul"},"ensures correct synchronisation of actor's ",(0,r.yg)("a",{parentName:"li",href:"/api/core/class/Activity"},"activities"),".")),(0,r.yg)("p",null,"Since ",(0,r.yg)("a",{parentName:"p",href:"/api/web/class/PageElements"},(0,r.yg)("inlineCode",{parentName:"a"},"PageElements"))," class derives from ",(0,r.yg)("inlineCode",{parentName:"p"},"List"),", it also offers this functionality."),(0,r.yg)("h3",{id:"iterating-over-a-static-array"},"Iterating over a static Array"),(0,r.yg)("p",null,"To instruct an actor to iterate over a static ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"},(0,r.yg)("inlineCode",{parentName:"a"},"Array")),",\nwrap it using ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/List#of"},(0,r.yg)("inlineCode",{parentName:"a"},"List.of")),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, List, Log } from '@serenity-js/core'\n\nconst items = List.of([ 'first', 'second', 'third' ]);\n\nawait actorCalled('Joe').attemptsTo(\n    items.forEach(({ actor, item }) => actor.attemptsTo(\n        Log.the('current item', item)\n    )),\n)\n")),(0,r.yg)("h3",{id:"iterating-over-rest-api-responses"},"Iterating over REST API responses"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/api/core/class/List#of"},(0,r.yg)("inlineCode",{parentName:"a"},"List.of"))," pattern also applies to\nwrapping iterables returned from a ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question"},(0,r.yg)("inlineCode",{parentName:"a"},"Question"))," or ",(0,r.yg)("a",{parentName:"p",href:"/api/core#QuestionAdapter"},(0,r.yg)("inlineCode",{parentName:"a"},"QuestionAdapter")),"."),(0,r.yg)("p",null,"This is particularly useful when iterating over responses from ",(0,r.yg)("a",{parentName:"p",href:"/api/rest"},"REST APIs"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="GET /products"',title:'"GET','/products"':!0},'{\n  "products": [\n      { "name": "apples" },\n      { "name": "bananas" },\n      { "name": "cinnamon rolls" }\n  ]\n}\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, List, Log } from '@serenity-js/core'\nimport { GetRequest, LastResponse, Send } from '@serenity-js/rest'\n\ninterface ProductsResponse {\n    products: Array<{ name: string }>\n}\n\nawait actorCalled('Apisit')\n    .attemptsTo(\n        Send.a(GetRequest.to('/products')),\n        List.of(LastResponse.body<ProductsResponse>().products)\n            .forEach(({ actor, item }) => actor.attemptsTo(\n                Log.the(item),\n            ))\n    )\n")),(0,r.yg)("h3",{id:"iterating-over-web-ui-elements"},"Iterating over web UI elements"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/api/web/class/PageElements"},(0,r.yg)("inlineCode",{parentName:"a"},"PageElements"))," is derived from ",(0,r.yg)("inlineCode",{parentName:"p"},"List"),", so it also offers a ",(0,r.yg)("a",{parentName:"p",href:"/api/web/class/PageElements#forEach"},(0,r.yg)("inlineCode",{parentName:"a"},"forEach"))," method:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-html",metastring:'title="example widget"',title:'"example','widget"':!0},'<label for="tnc-consent">\n    <input type="checkbox" name="tnc-consent">\n    Yes, I agree with terms and conditions\n</label>\n<label for="newsletter-consent">\n    <input type="checkbox" name="newsletter-consent">\n    Yes, I\'d like to receive the newsletter\n</label>\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { PageElements, By, Click } from '@serenity-js/web'\n\nconst checkboxes = () =>\n    PageElements.located(By.css('[type=\"checkbox\"]'))\n        .describeAs('checkboxes')\n\nawait actorCalled('Francis')\n    .attemptsTo(\n        checkboxes().forEach(({ actor, item }) => actor.attemptsTo(\n            Click.on(item),\n        ))\n    )\n")),(0,r.yg)("h3",{id:"synchronisation-caveats"},"Synchronisation caveats"),(0,r.yg)("p",null,"All the ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Activity"},"activities")," performed by Serenity/JS actors are ",(0,r.yg)("strong",{parentName:"p"},"asynchronous"),".\nWhile the framework takes care of sequencing them correctly when they're executed\nvia ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Actor#attemptsTo"},(0,r.yg)("inlineCode",{parentName:"a"},"Actor.attemptsTo")),",\nthe ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},(0,r.yg)("inlineCode",{parentName:"a"},"Promise")),"\nreturned by this method itself ",(0,r.yg)("strong",{parentName:"p"},"must be synchronised")," with the ",(0,r.yg)("a",{parentName:"p",href:"/handbook/test-runners/"},"test runner"),"."),(0,r.yg)("p",null,"This is very easy to do using ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises#async_and_await"},(0,r.yg)("inlineCode",{parentName:"a"},"async/await")),",\nlike in this example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { describe, it } from 'mocha'\nimport { actorCalled, Log } from '@serenity-js/core'\n\ndescribe('Serenity/JS actor.attemptsTo', () => {\n\n    it('returns a Promise', async () => {           // note \"async\"\n        await actorCalled('Joe').attemptsTo(        // note \"await\"\n            Log.the('current item')\n        )\n    })\n})\n")),(0,r.yg)("p",null,"However, most low-level JavaScript control flow constructs ",(0,r.yg)("strong",{parentName:"p"},"DO NOT SUPPORT")," ",(0,r.yg)("inlineCode",{parentName:"p"},"async/await"),"."),(0,r.yg)("p",null,"For example, this listing ",(0,r.yg)("strong",{parentName:"p"},"DOESN'T WORK")," as\n",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"},(0,r.yg)("inlineCode",{parentName:"a"},"Array.forEach")),"\nexpects a ",(0,r.yg)("strong",{parentName:"p"},"synchronous function")," and  ",(0,r.yg)("strong",{parentName:"p"},"does not wait for promises"),".\nThis means that the promise return by ",(0,r.yg)("inlineCode",{parentName:"p"},"Actor.attemptsTo"),"\nis ignored and the behaviour of the test scenario becomes unpredictable:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { describe, it } from 'mocha'\nimport { actorCalled, Log } from '@serenity-js/core'\n\ndescribe('Serenity/JS actor.attemptsTo', () => {\n\n    it('returns a Promise', async () => {\n        // BROKEN, DON'T USE! JavaScript forEach doesn't support Promises\n        await [ 'first', 'second', 'third' ]\n            .forEach(async item => {              // async/await ignored!\n                await actorCalled('Joe').attemptsTo(\n                    Log.the('current item', item)\n                )\n            })\n    })\n})\n")),(0,r.yg)("p",null,"If you want to iterate over a ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"},"native JavaScript Array"),",\nmake sure to do so using a construct that supports ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols"},"async iterables"),",\nsuch as ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of"},(0,r.yg)("inlineCode",{parentName:"a"},"for...of")),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { describe, it } from 'mocha'\nimport { actorCalled, Log } from '@serenity-js/core'\n\ndescribe('Serenity/JS actor.attemptsTo', () => {\n\n    it('returns a Promise', async () => {\n        const items = [ 'first', 'second', 'third' ];\n\n        for (const item of items) {                 // for...of\n            await actorCalled('Joe').attemptsTo(    // supports async/await\n                Log.the('current item', item)\n            )\n        }\n    })\n})\n")),(0,r.yg)("p",null,"Of course, the ",(0,r.yg)("strong",{parentName:"p"},"most flexible approach")," is to use the Serenity/JS-native ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/List"},(0,r.yg)("inlineCode",{parentName:"a"},"List"))," data structure,\nwhich provides a custom implementation of ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/List#forEach"},(0,r.yg)("inlineCode",{parentName:"a"},"forEach")),"\nthat returns a ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Task"},"task")," and ",(0,r.yg)("strong",{parentName:"p"},"DOES SUPPORT"),"\nasynchronous operations:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { describe, it } from 'mocha'\nimport { actorCalled, List, Log } from '@serenity-js/core'\n\ndescribe('Serenity/JS actor.attemptsTo', () => {\n\n    it('returns a Promise', async () => {\n        const items = List.of([ 'first', 'second', 'third' ]);\n\n        await actorCalled('Joe').attemptsTo(\n            items.forEach(({ actor, item }) => actor.attemptsTo(\n                Log.the('current item', item)\n            )),\n        )\n    })\n})\n")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/api/core/class/List"},(0,r.yg)("inlineCode",{parentName:"a"},"List.forEach"))," allows loops to be encapsulated in other ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Task"},"tasks"),",\nand is therefore the ",(0,r.yg)("strong",{parentName:"p"},"recommended approach"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { describe, it } from 'mocha'\nimport { actorCalled, List, Log, Task } from '@serenity-js/core'\n\ndescribe('Serenity/JS actor.attemptsTo', () => {\n\n    const logEachOf = <T>(items: List<T>) =>\n        Task.where(`#actor logs each item`,\n            items.forEach(({ actor, item }) => actor.attemptsTo(\n                Log.the('current item', item)\n            )),\n        )\n\n    it('returns a Promise', async () => {\n        const items = List.of([ 'first', 'second', 'third' ]);\n\n        await actorCalled('Joe').attemptsTo(\n            logEachOf(items),\n        )\n    })\n})\n")))}y.isMDXComponent=!0}}]);