"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[90671],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76147:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7896),a=(n(2784),n(30876));const s={sidebar_position:5},o="Lean Page Objects Pattern",i={unversionedId:"web-testing/page-objects-pattern",id:"web-testing/page-objects-pattern",title:"Lean Page Objects Pattern",description:"While the Screenplay Pattern is a behavioural pattern,",source:"@site/docs/web-testing/page-objects-pattern.mdx",sourceDirName:"web-testing",slug:"/web-testing/page-objects-pattern",permalink:"/handbook/web-testing/page-objects-pattern",draft:!1,editUrl:"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/docs/web-testing/page-objects-pattern.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Page Element Query Language",permalink:"/handbook/web-testing/page-element-query-language"},next:{title:"Serenity/JS web modules",permalink:"/handbook/web-testing/serenity-js-web-modules"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lean-page-objects-pattern"},"Lean Page Objects Pattern"),(0,a.kt)("p",null,"While the ",(0,a.kt)("a",{parentName:"p",href:"/handbook/design/screenplay-pattern"},"Screenplay Pattern")," is a ",(0,a.kt)("strong",{parentName:"p"},"behavioural pattern"),",\nLean Page Objects is a ",(0,a.kt)("strong",{parentName:"p"},"structural pattern"),". Contrary to the more ",(0,a.kt)("a",{parentName:"p",href:"https://martinfowler.com/bliki/PageObject.html"},"traditional definition of Page Objects"),",\nSerenity/JS Lean Page Objects are minimalistic and focused only on grouping\nrelated ",(0,a.kt)("a",{parentName:"p",href:"/handbook/web-testing/page-element-query-language"},"page elements"),"."),(0,a.kt)("p",null,"Consider the below UI widget showing product search results for an imaginary online grocery store:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<ul id="product-search-results">\n    <li class="product-search-result">\n        <span class="product-name">apples</span>\n        <span class="product-price">\xa32.25</span>\n    </li>\n    <li class="product-search-result">\n        <span class="product-name">bananas</span>\n        <span class="product-price">\xa31.50</span>\n    </li>\n</ul>\n')),(0,a.kt)("p",null,"How would you approach writing a test scenario that checks the displayed product price of an arbitrary product?"),(0,a.kt)("p",null,"With Serenity/JS you could define a Lean Page Object describing the interesting page elements of the individual ",(0,a.kt)("inlineCode",{parentName:"p"},".product-search-result"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PageElement, By, Text } from '@serenity-js/web'\n\nclass ProductSearchResult {\n    static name = () =>\n        Text.of(\n            PageElement.located(By.css('.product-name'))\n        ).describedAs('name')\n\n    static price = () =>\n        Text.of(\n            PageElement.located(By.css('.product-price'))\n        ).describedAs('price')\n}\n")),(0,a.kt)("p",null,"Then, you could define another Lean Page Object to describe the container widget of ",(0,a.kt)("inlineCode",{parentName:"p"},"product-search-results"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PageElement, PageElements, By } from '@serenity-js/web'\n\nclass ProductSearch {\n    static widget = () =>\n        PageElement.located(By.id('product-search-results'))\n            .describedAs('product search results widget')\n\n    static results = () =>\n        PageElements.located(By.css('.product-search-result'))\n            .of(this.widget())\n            .describedAs('product search results')\n}\n")),(0,a.kt)("p",null,"Finally, you could use Serenity/JS ",(0,a.kt)("a",{parentName:"p",href:"/handbook/web-testing/page-element-query-language"},"Page Element Query Language"),"\nto define a method like ",(0,a.kt)("inlineCode",{parentName:"p"},"resultFor")," that returned the required search result based on the product name:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Answerable } from '@serenity-js/core'\nimport { Text } from '@serenity-js/web'\nimport { includes } from '@serenity-js/assertions'\n\nclass ProductSearch {\n    static resultFor = (name: Answerable<string>) =>\n        this.results()\n            .where(ProductSearchResult.name(), includes(name))\n            .first()\n\n    // implementation of `results()` and `widget()` omitted for brevity\n}\n")),(0,a.kt)("p",null,"Once you've created a handful of simple Lean Page Objects to help you identify the correct page elements,\nwriting a test scenario to verify the displayed price becomes trivial:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nawait actorCalled('Leonora').attemptsTo(\n    Ensure.that(\n        ProductSearchResult.price().of(\n            ProductSearch.resultFor('bananas')\n        ),\n        equals('\xa31.50')\n    )\n)\n")),(0,a.kt)("p",null,"This is just one of many possible ways to structure your Lean Page Objects.\nOnce you get used to the Serenity/JS ",(0,a.kt)("a",{parentName:"p",href:"/handbook/web-testing/page-element-query-language"},"Page Element Query Language"),",\nyou'll likely find other page element structures that work for you and your project."))}d.isMDXComponent=!0}}]);