"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[48343],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||s;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},33142:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(2784),r=n(6277);const s={tabItem:"tabItem_OMyP"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,i),hidden:n},t)}},43193:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(7896),r=n(2784),s=n(6277),i=n(25425),o=n(66806),l=n(50717);const c={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};function p(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,i.o5)(),h=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==o&&(m(t),l(a))},d=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:h},i,{className:(0,s.Z)("tabs__item",c.tabItem,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function u(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function m(e){const t=(0,o.Y)(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",c.tabList)},r.createElement(p,(0,a.Z)({},e,t)),r.createElement(u,(0,a.Z)({},e,t)))}function h(e){const t=(0,l.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},66806:(e,t,n)=>{n.d(t,{Y:()=>m});var a=n(2784),r=n(7267),s=n(24236),i=n(53432),o=n(79675);function l(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??l(n);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function u(e){let{queryString:t=!1,groupId:n}=e;const i=(0,r.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(i.location.search);t.set(o,e),i.replace({...i.location,search:t.toString()})}),[o,i])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=c(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[m,h]=u({queryString:n,groupId:r}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,o.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),g=(()=>{const e=m??d;return p({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),b(e)}),[h,b,s]),tabValues:s}}},68033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=n(7896),r=(n(2784),n(30876)),s=n(43193),i=n(33142);const o={sidebar_position:2,title:"Configuring the HTTP client"},l="Configuring the HTTP client",c={unversionedId:"api-testing/configuring-http-client",id:"api-testing/configuring-http-client",title:"Configuring the HTTP client",description:"To interact with an HTTP-based API, your Serenity/JS actor",source:"@site/docs/api-testing/configuring-http-client.mdx",sourceDirName:"api-testing",slug:"/api-testing/configuring-http-client",permalink:"/handbook/api-testing/configuring-http-client",draft:!1,editUrl:"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/docs/api-testing/configuring-http-client.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Configuring the HTTP client"},sidebar:"tutorialSidebar",previous:{title:"Your first API scenario",permalink:"/handbook/api-testing/your-first-api-scenario"},next:{title:"Sending requests",permalink:"/handbook/api-testing/sending-requests"}},p={},u=[{value:"Configuring API-only test scenarios",id:"configuring-api-only-test-scenarios",level:2},{value:"Configuring blended test scenarios",id:"configuring-blended-test-scenarios",level:2},{value:"Dynamically configuring the base URL",id:"dynamically-configuring-the-base-url",level:2},{value:"Dynamically overriding abilities",id:"dynamically-overriding-abilities",level:2}],m={toc:u},h="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuring-the-http-client"},"Configuring the HTTP client"),(0,r.kt)("p",null,"To interact with an HTTP-based API, your Serenity/JS ",(0,r.kt)("a",{parentName:"p",href:"/handbook/design/screenplay-pattern/#actors"},"actor"),"\nneeds the ",(0,r.kt)("a",{parentName:"p",href:"/handbook/design/screenplay-pattern/#abilities"},"ability"),"\nto ",(0,r.kt)("a",{parentName:"p",href:"/api/rest/class/CallAnApi/"},"CallAnApi"),", which wraps the Axios HTTP client enabling the low-level interactions."),(0,r.kt)("p",null,"In addition to wrapping the Axios client, the ability to ",(0,r.kt)("inlineCode",{parentName:"p"},"CallAnApi")," also adds automatic proxy server support based\non your ",(0,r.kt)("a",{parentName:"p",href:"/api/rest/class/CallAnApi/"},"environment variables or configuration"),"."),(0,r.kt)("h2",{id:"configuring-api-only-test-scenarios"},"Configuring API-only test scenarios"),(0,r.kt)("p",null,"You can integrate Serenity/JS directly with ",(0,r.kt)("a",{parentName:"p",href:"/handbook/test-runners/cucumber/"},"Cucumber"),", ",(0,r.kt)("a",{parentName:"p",href:"/handbook/test-runners/mocha/"},"Mocha"),",\nor ",(0,r.kt)("a",{parentName:"p",href:"/handbook/test-runners/jasmine/"},"Jasmine")," to write API-only test scenarios without the overhead of managing a web browser.\nIn those cases, you should add the ability to ",(0,r.kt)("inlineCode",{parentName:"p"},"CallAnApi")," yourself when ",(0,r.kt)("a",{parentName:"p",href:"/api/core/class/Cast/"},"configuring the cast of actors"),":"),(0,r.kt)(s.Z,{groupId:"code-examples",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"mocha-(api-only)",label:"Mocha (API-only)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/example.spec.ts" tab={"label":"Mocha (API-only)"}',title:'"spec/example.spec.ts"',tab:'{"label":"Mocha','(API-only)"}':!0},"import { before, describe, it } from 'mocha'\nimport { engage, Cast } from '@serenity-js/core'\nimport { CallAnApi } from '@serenity-js/rest'\n\ndescribe('GitHub Status API v2', () => {\n\n    before(async () => {\n        engage(Cast.where(actor => actor.whoCan(\n            CallAnApi.at('https://www.githubstatus.com/api/v2/')\n        )))\n    })\n})\n"))),(0,r.kt)(i.Z,{value:"jasmine-(api-only)",label:"Jasmine (API-only)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/example.spec.ts" tab={"label":"Jasmine (API-only)"}',title:'"spec/example.spec.ts"',tab:'{"label":"Jasmine','(API-only)"}':!0},"import 'jasmine';\nimport { engage, Cast } from '@serenity-js/core'\nimport { CallAnApi } from '@serenity-js/rest'\n\ndescribe('GitHub Status API v2', () => {\n\n    beforeAll(async () => {\n        engage(Cast.where(actor => actor.whoCan(\n            CallAnApi.at('https://www.githubstatus.com/api/v2/')\n        )))\n    })\n})\n"))),(0,r.kt)(i.Z,{value:"cucumber-(api-only)",label:"Cucumber (API-only)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="features/support/serenity.config.ts" tab={"label":"Cucumber (API-only)"}',title:'"features/support/serenity.config.ts"',tab:'{"label":"Cucumber','(API-only)"}':!0},"import { BeforeAll } from '@cucumber/cucumber'\nimport { engage, Cast } from '@serenity-js/core'\nimport { CallAnApi } from '@serenity-js/rest'\n\nBeforeAll(async () => {\n\n    engage(Cast.where(actor => actor.whoCan(\n        CallAnApi.at('https://www.githubstatus.com/api/v2/')\n    )))\n})\n")))),(0,r.kt)("p",null,"Make sure to review the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js/tree/main/examples"},"examples and reference implementations"),", as well as ",(0,r.kt)("a",{parentName:"p",href:"/handbook/getting-started/project-templates/#resthttp-api-testing"},"Serenity/JS REST API testing Project Templates"),"\nto see how to apply the above configuration to an existing project."),(0,r.kt)("h2",{id:"configuring-blended-test-scenarios"},"Configuring blended test scenarios"),(0,r.kt)("p",null,"You can use Serenity/JS with ",(0,r.kt)("a",{parentName:"p",href:"/handbook/test-runners/playwright-test/"},"Playwright Test"),", ",(0,r.kt)("a",{parentName:"p",href:"/handbook/test-runners/webdriverio/"},"WebdriverIO"),",\nor ",(0,r.kt)("a",{parentName:"p",href:"/handbook/test-runners/protractor/"},"Protractor")," to write ",(0,r.kt)("a",{parentName:"p",href:"/handbook/api-testing/blended-testing/"},(0,r.kt)("strong",{parentName:"a"},"blended test scenarios"))," interacting with ",(0,r.kt)("strong",{parentName:"p"},"both the web UI and APIs"),".\nIn those cases, the ability to ",(0,r.kt)("inlineCode",{parentName:"p"},"CallAnApi")," is ",(0,r.kt)("strong",{parentName:"p"},"configured for you automatically")," by the respective Serenity/JS test runner adapter\nand uses the ",(0,r.kt)("strong",{parentName:"p"},"base URL")," defined in your test runner configuration file.\nTo override the base URL, provide a full URL when performing ",(0,r.kt)("inlineCode",{parentName:"p"},"Send")," interactions."),(0,r.kt)(s.Z,{groupId:"code-examples",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"playwright-test (ui+api)",label:"Playwright Test (UI+API)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/healthcheck.spec.ts" tab={"label":"Playwright Test (UI+API)"}',title:'"spec/healthcheck.spec.ts"',tab:'{"label":"Playwright',Test:!0,'(UI+API)"}':!0},"import { describe, it, test } from '@serenity-js/playwright-test'\nimport { Send, GetRequest, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals, startsWith } from '@serenity-js/assertions'\nimport { Navigate, Page } from '@serenity-js/web'\n\ndescribe('GitHub', () => {\n\n    // Set the baseURL directly in the test or in playwright.config.ts, for example:\n    test.use({\n        baseURL: 'https://github.com/'\n    })\n\n    describe('Sponsors', () => {\n\n        it('lets developers support Serenity/JS', async ({ actor }) => {\n\n            await actor.attemptsTo(\n                // Perform API-based interactions\n                Send.a(GetRequest.to('https://www.githubstatus.com/api/v2/summary.json')),\n                Ensure.that(LastResponse.status(), equals(200)),\n                Ensure.that(\n                    LastResponse.body().status.indicator,\n                    equals('none')\n                ),\n\n                // Perform any web-based interactions\n                Navigate.to('/sponsors/serenity-js'),\n                Ensure.that(\n                    Page.current().title(),\n                    startsWith('Sponsor @serenity-js on GitHub Sponsors')\n                ),\n            )\n        })\n    })\n})\n"))),(0,r.kt)(i.Z,{value:"webdriverio-(ui+api)",label:"WebdriverIO (UI+API)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/healthcheck.spec.ts" tab={"label":"WebdriverIO (UI+API)"}',title:'"spec/healthcheck.spec.ts"',tab:'{"label":"WebdriverIO','(UI+API)"}':!0},"import { describe, it } from 'mocha'\nimport { actorCalled } from '@serenity-js/core'\nimport { Send, GetRequest, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals, startsWith } from '@serenity-js/assertions'\nimport { Navigate, Page } from '@serenity-js/web'\n\ndescribe('GitHub', () => {\n\n    // Set the baseUrl in wdio.conf.ts, for example:\n    //\n    //   baseUrl: 'https://jsonplaceholder.typicode.com/'\n\n    describe('Sponsors', () => {\n\n        it('lets developers support Serenity/JS', async ({ }) => {\n\n            await actorCalled('Apisitt').attemptsTo(\n                // Perform API-based interactions\n                Send.a(GetRequest.to('https://www.githubstatus.com/api/v2/summary.json')),\n                Ensure.that(LastResponse.status(), equals(200)),\n                Ensure.that(\n                    LastResponse.body().status.indicator,\n                    equals('none')\n                ),\n\n                // Perform any web-based interactions\n                Navigate.to('/sponsors/serenity-js'),\n                Ensure.that(\n                    Page.current().title(),\n                    startsWith('Sponsor @serenity-js on GitHub Sponsors')\n                ),\n            )\n        })\n    })\n})\n"))),(0,r.kt)(i.Z,{value:"protractor-(ui+api)",label:"Protractor (UI+API)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/healthcheck.spec.ts" tab={"label":"Protractor (UI+API)"}',title:'"spec/healthcheck.spec.ts"',tab:'{"label":"Protractor','(UI+API)"}':!0},"import { describe, it } from 'mocha'\nimport { actorCalled } from '@serenity-js/core'\nimport { Send, GetRequest, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals, startsWith } from '@serenity-js/assertions'\nimport { Navigate, Page } from '@serenity-js/web'\n\ndescribe('GitHub', () => {\n\n    // Set the baseUrl in protractor.conf.js, for example:\n    //\n    //   baseUrl: 'https://jsonplaceholder.typicode.com/'\n\n    describe('Sponsors', () => {\n\n        it('lets developers support Serenity/JS', async ({ }) => {\n\n            await actorCalled('Apisitt').attemptsTo(\n                // Perform API-based interactions\n                Send.a(GetRequest.to('https://www.githubstatus.com/api/v2/summary.json')),\n                Ensure.that(LastResponse.status(), equals(200)),\n                Ensure.that(\n                    LastResponse.body().status.indicator,\n                    equals('none')\n                ),\n\n                // Perform any web-based interactions\n                Navigate.to('/sponsors/serenity-js'),\n                Ensure.that(\n                    Page.current().title(),\n                    startsWith('Sponsor @serenity-js on GitHub Sponsors')\n                ),\n            )\n        })\n    })\n})\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Learn more"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://playwright.dev/docs/test-configuration"},"Configuring Playwright Test")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://webdriver.io/docs/configurationfile/"},"Configuring WebdriverIO")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/angular/protractor/blob/master/lib/config.ts"},"Configuring Protractor"))),(0,r.kt)("h2",{id:"dynamically-configuring-the-base-url"},"Dynamically configuring the base URL"),(0,r.kt)("p",null,"If you need to dynamically ",(0,r.kt)("a",{parentName:"p",href:"/api/rest/class/ChangeApiConfig/#setUrlTo"},"change the base URL"),"\nor ",(0,r.kt)("a",{parentName:"p",href:"/api/rest/class/ChangeApiConfig/#setPortTo"},"port")," of the API you're interacting with,\nor ",(0,r.kt)("a",{parentName:"p",href:"/api/rest/class/ChangeApiConfig/#setHeader"},"set extra HTTP headers"),", use the task to ",(0,r.kt)("a",{parentName:"p",href:"/api/rest/class/ChangeApiConfig/"},(0,r.kt)("inlineCode",{parentName:"a"},"ChangeApiConfig")),".\nThis approach works for both API-only and ",(0,r.kt)("a",{parentName:"p",href:"/handbook/api-testing/blended-testing/"},"blended test scenarios"),", with any config overrides returning to their original state before the next scenario starts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ChangeApiConfig } from '@serenity-js/rest';\n\nawait actorCalled('Apisitt').attemptsTo(\n    ChangeApiConfig.setUrlTo('https://example.org/secure/oauth'),\n\n    // ... perform some API calls\n)\n")),(0,r.kt)("h2",{id:"dynamically-overriding-abilities"},"Dynamically overriding abilities"),(0,r.kt)("p",null,"You can ",(0,r.kt)("strong",{parentName:"p"},"add or override")," the ability to ",(0,r.kt)("inlineCode",{parentName:"p"},"CallAnApi")," on a per-scenario / per-actor basis using ",(0,r.kt)("a",{parentName:"p",href:"/api/core/class/Actor/#whoCan"},(0,r.kt)("inlineCode",{parentName:"a"},"actor.whoCan")),".\nThis approach works for both API-only and blended test scenarios, with any config overrides returning to their original state before the next scenario starts:"),(0,r.kt)(s.Z,{groupId:"code-examples",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"mocha-(api-only)",label:"Mocha (API-only)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/product-search.spec.ts" tab={"label":"Mocha (API-only)"}',title:'"spec/product-search.spec.ts"',tab:'{"label":"Mocha','(API-only)"}':!0},"import { describe, it, before } from 'mocha'\nimport { engage, Cast, actorCalled } from '@serenity-js/core'\nimport { CallAnApi, Send, GetRequest, PostRequest, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\ndescribe('My Shop', () => {\n\n    // Assume there are 2 web services:\n    // - test data service, responsible for populating an example online shop with test data\n    // - search service, using the test data created by the test data service\n    const testDataServiceUrl = 'https://test-data.example.org/api/v1/';\n    const searchServiceUrl   = 'https://search.example.org/api/v1/';\n\n    before(() => {\n        // Configure the cast so that all actor can interact with the search service\n        engage(\n            Cast.where(actor => actor.whoCan(CallAnApi.at(searchServiceUrl)))\n        )\n    })\n\n    describe('Product Search', () => {\n\n        it('finds products based on their name', async () => {\n\n            // Override the CallAnApi ability\n            await actorCalled('Admin')\n                .whoCan(CallAnApi.at(testDataServiceUrl))\n                .attemptsTo(\n                    // Perform API-based interactions to set up the test data\n                    Send.a(PostRequest.to('products').with({ name: 'Apples', price: '\xa32.50' })),\n                    Ensure.that(LastResponse.status(), equals(201)),\n                )\n\n            await actorCalled('Barbara')\n                .attemptsTo(\n                    // Perform API-based interactions with the search service\n                    Send.a(GetRequest.to('search?name=Apples')),\n                    Ensure.that(LastResponse.status(), equals(200)),\n                    Ensure.that(LastResponse.body(), equals([\n                        { name: 'Apples', price: '\xa32.50' }\n                    ])),\n                )\n        })\n    })\n})\n"))),(0,r.kt)(i.Z,{value:"playwright-test (ui+api)",label:"Playwright Test (UI+API)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/product-search.spec.ts" tab={"label":"Playwright Test (UI+API)"}',title:'"spec/product-search.spec.ts"',tab:'{"label":"Playwright',Test:!0,'(UI+API)"}':!0},"import { describe, it, test } from '@serenity-js/playwright-test'\nimport { CallAnApi, Send, GetRequest, PostRequest, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\ndescribe('My Shop', () => {\n\n    // Assume there are 2 web services:\n    // - test data service, responsible for populating an example online shop with test data\n    // - search service, using the test data created by the test data service\n    const testDataServiceUrl = 'https://test-data.example.org/api/v1/';\n    const searchServiceUrl   = 'https://search.example.org/api/v1/';\n\n    // Configure the cast so that all actor can interact with the search service\n    test.use({\n        baseURL: searchServiceUrl\n    })\n\n    describe('Product Search', () => {\n\n        it('finds products based on their name', async ({ actorCalled }) => {\n\n            // Override the CallAnApi ability\n            await actorCalled('Admin')\n                .whoCan(CallAnApi.at(testDataServiceUrl))\n                .attemptsTo(\n                    // Perform API-based interactions to set up the test data\n                    Send.a(PostRequest.to('products').with({ name: 'Apples', price: '\xa32.50' })),\n                    Ensure.that(LastResponse.status(), equals(201)),\n                )\n\n            await actorCalled('Barbara')\n                .attemptsTo(\n                    // Perform API-based interactions with the search service\n                    Send.a(GetRequest.to('search?name=Apples')),\n                    Ensure.that(LastResponse.status(), equals(200)),\n                    Ensure.that(LastResponse.body(), equals([\n                        { name: 'Apples', price: '\xa32.50' }\n                    ])),\n                )\n        })\n    })\n})\n"))),(0,r.kt)(i.Z,{value:"webdriverio-(ui+api)",label:"WebdriverIO (UI+API)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/product-search.spec.ts" tab={"label":"WebdriverIO (UI+API)"}',title:'"spec/product-search.spec.ts"',tab:'{"label":"WebdriverIO','(UI+API)"}':!0},"import { describe, it } from 'mocha'\nimport { actorCalled } from '@serenity-js/core'\nimport { CallAnApi, Send, GetRequest, PostRequest, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\ndescribe('My Shop', () => {\n\n    // Assume there are 2 web services:\n    // - test data service, responsible for populating an example online shop with test data\n    // - search service, using the test data created by the test data service\n\n    // Set the baseUrl of the search service available to all actors in wdio.conf.ts, for example:\n    //\n    //   baseUrl: 'https://search.example.org/api/v1/'\n\n    // URLs of other services can be set in the test itself, for example:\n    const testDataServiceUrl = 'https://test-data.example.org/api/v1/';\n\n    describe('Product Search', () => {\n\n        it('finds products based on their name', async () => {\n\n            // Override the CallAnApi ability\n            await actorCalled('Admin')\n                .whoCan(CallAnApi.at(testDataServiceUrl))\n                .attemptsTo(\n                    // Perform API-based interactions to set up the test data\n                    Send.a(PostRequest.to('products').with({ name: 'Apples', price: '\xa32.50' })),\n                    Ensure.that(LastResponse.status(), equals(201)),\n                )\n\n            await actorCalled('Barbara')\n                .attemptsTo(\n                    // Perform API-based interactions with the search service\n                    Send.a(GetRequest.to('search?name=Apples')),\n                    Ensure.that(LastResponse.status(), equals(200)),\n                    Ensure.that(LastResponse.body(), equals([\n                        { name: 'Apples', price: '\xa32.50' }\n                    ])),\n                )\n        })\n    })\n})\n"))),(0,r.kt)(i.Z,{value:"protractor-(ui+api)",label:"Protractor (UI+API)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="spec/product-search.spec.ts" tab={"label":"Protractor (UI+API)"}',title:'"spec/product-search.spec.ts"',tab:'{"label":"Protractor','(UI+API)"}':!0},"import { describe, it } from 'mocha'\nimport { actorCalled } from '@serenity-js/core'\nimport { CallAnApi, Send, GetRequest, PostRequest, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\ndescribe('My Shop', () => {\n\n    // Assume there are 2 web services:\n    // - test data service, responsible for populating an example online shop with test data\n    // - search service, using the test data created by the test data service\n\n    // Set the baseUrl of the search service available to all actors in protractor.conf.js, for example:\n    //\n    //   baseUrl: 'https://search.example.org/api/v1/'\n\n    // URLs of other services can be set in the test itself, for example:\n    const testDataServiceUrl = 'https://test-data.example.org/api/v1/';\n\n    describe('Product Search', () => {\n\n        it('finds products based on their name', async () => {\n\n            // Override the CallAnApi ability\n            await actorCalled('Admin')\n                .whoCan(CallAnApi.at(testDataServiceUrl))\n                .attemptsTo(\n                    // Perform API-based interactions to set up the test data\n                    Send.a(PostRequest.to('products').with({ name: 'Apples', price: '\xa32.50' })),\n                    Ensure.that(LastResponse.status(), equals(201)),\n                )\n\n            await actorCalled('Barbara')\n                .attemptsTo(\n                    // Perform API-based interactions with the search service\n                    Send.a(GetRequest.to('search?name=Apples')),\n                    Ensure.that(LastResponse.status(), equals(200)),\n                    Ensure.that(LastResponse.body(), equals([\n                        { name: 'Apples', price: '\xa32.50' }\n                    ])),\n                )\n        })\n    })\n})\n")))))}d.isMDXComponent=!0}}]);