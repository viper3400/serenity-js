"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[19996],{30876:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),p=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(r.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,g=c["".concat(r,".").concat(d)]||c[d]||u[d]||s;return n?a.createElement(g,l(l({ref:t},m),{},{components:n})):a.createElement(g,l({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,l=new Array(s);l[0]=d;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4599:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7896),i=(n(2784),n(30876));const s={sidebar_position:2},l="Page Element Query Language",o={unversionedId:"web-testing/page-element-query-language",id:"web-testing/page-element-query-language",title:"Page Element Query Language",description:"Page Element Query Language (PEQL) is a portable, composable, and type-safe abstraction layer",source:"@site/docs/web-testing/page-element-query-language.md",sourceDirName:"web-testing",slug:"/web-testing/page-element-query-language",permalink:"/handbook/web-testing/page-element-query-language",draft:!1,editUrl:"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/docs/web-testing/page-element-query-language.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Your first web scenario",permalink:"/handbook/web-testing/your-first-web-scenario"},next:{title:"Lean Page Objects Pattern",permalink:"/handbook/web-testing/page-objects-pattern"}},r={},p=[{value:"Working with a single page element",id:"working-with-a-single-page-element",level:2},{value:"Representing a page element",id:"representing-a-page-element",level:3},{value:"Customising page element description",id:"customising-page-element-description",level:3},{value:"Composing <code>PageElement</code> with other web questions",id:"composing-pageelement-with-other-web-questions",level:3},{value:"Asserting on a page element",id:"asserting-on-a-page-element",level:3},{value:"Waiting for a page element",id:"waiting-for-a-page-element",level:3},{value:"Using selector aliases",id:"using-selector-aliases",level:3},{value:"Using dynamic selectors",id:"using-dynamic-selectors",level:3},{value:"Using meta-questions",id:"using-meta-questions",level:3},{value:"Working with a collection of page elements",id:"working-with-a-collection-of-page-elements",level:2},{value:"Representing a collection of page elements",id:"representing-a-collection-of-page-elements",level:3},{value:"Retrieving a specific element from a collection",id:"retrieving-a-specific-element-from-a-collection",level:3},{value:"Customising page elements description",id:"customising-page-elements-description",level:3},{value:"Composing <code>PageElements</code> with other questions",id:"composing-pageelements-with-other-questions",level:3},{value:"Mapping page elements in a collection",id:"mapping-page-elements-in-a-collection",level:3},{value:"Filtering page elements in a collection",id:"filtering-page-elements-in-a-collection",level:3},{value:"Combining mapping, composition, and filtering",id:"combining-mapping-composition-and-filtering",level:2},{value:"Mapping elements in a collection using meta-questions",id:"mapping-elements-in-a-collection-using-meta-questions",level:3},{value:"Using partially-applied meta-questions",id:"using-partially-applied-meta-questions",level:3},{value:"Mapping elements in a collection using partially-applied meta-questions",id:"mapping-elements-in-a-collection-using-partially-applied-meta-questions",level:3},{value:"Filtering a collection using partially-applied meta-questions",id:"filtering-a-collection-using-partially-applied-meta-questions",level:3},{value:"Iterating over elements",id:"iterating-over-elements",level:3}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"page-element-query-language"},"Page Element Query Language"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Page Element Query Language (PEQL)")," is a portable, composable, and type-safe abstraction layer\naround selectors and web element interaction methods provided by web integration tools like\n",(0,i.kt)("a",{parentName:"p",href:"/api/webdriverio"},"WebdriverIO"),", ",(0,i.kt)("a",{parentName:"p",href:"/api/playwright"},"Playwright"),", or ",(0,i.kt)("a",{parentName:"p",href:"/api/protractor"},"Protractor"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("abbr",{title:"Page Element Query Language"},"PEQL"))," leverages Serenity/JS ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Expectation"},"expectations library"),"\nand ",(0,i.kt)("a",{parentName:"p",href:"/api/core/interface/MetaQuestion"},"meta-questions")," to give you\na standardised, consistent, and extensible way to identify elements in a web interface."),(0,i.kt)("p",null,"Key points:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Page Element Query Language (PEQL)")," is a portable and type-safe abstraction around web interaction APIs provided by your web integration tools"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/api/web/class/PageElement"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElement")))," is a ",(0,i.kt)("a",{parentName:"li",href:"/api/core/class/Question"},"question")," that resolves to a ",(0,i.kt)("a",{parentName:"li",href:"/handbook/web-testing/page-element-query-language#working-with-a-single-page-element"},"single web element"),", ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/api/web/class/PageElements"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements")))," resolves to a ",(0,i.kt)("a",{parentName:"li",href:"/handbook/web-testing/page-element-query-language#working-with-a-collection-of-page-elements"},"collection of elements")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PageElement")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"PageElements")," are also ",(0,i.kt)("a",{parentName:"li",href:"/api/core/interface/MetaQuestion"},"meta-questions"),", so can be resolved relatively to another ",(0,i.kt)("inlineCode",{parentName:"li"},"PageElement")," to dynamically form a child-parent relationship"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/api/web/class/By"},(0,i.kt)("inlineCode",{parentName:"a"},"By")," selectors"))," help to identify page elements of interest"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/handbook/web-testing/page-element-query-language#using-partially-applied-meta-questions"},"Partially-applied meta-questions"))," can be chained together to enable code reuse"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/handbook/web-testing/page-element-query-language#querying-elements"},(0,i.kt)("strong",{parentName:"a"},(0,i.kt)("abbr",{title:"Page Element Query Language"},"PEQL")))," leverages\n",(0,i.kt)("a",{parentName:"li",href:"/api/core/class/Expectation"},"expectations")," and ",(0,i.kt)("a",{parentName:"li",href:"/api/core/interface/MetaQuestion"},"meta-questions"),",\njust like ",(0,i.kt)("a",{parentName:"li",href:"/handbook/design/assertions"},"assertions")," and ",(0,i.kt)("a",{parentName:"li",href:"/handbook/design/waiting-and-synchronisation"},"synchronisation statements")," do.")),(0,i.kt)("h2",{id:"working-with-a-single-page-element"},"Working with a single page element"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElement"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElement"))," class is a ",(0,i.kt)("a",{parentName:"p",href:"/handbook/design/screenplay-pattern"},"Screenplay Pattern"),"-compatible\nabstraction that represents a single ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Element"},"element")," in a web interface."),(0,i.kt)("p",null,"To help you understand how to use this abstraction, consider the below article widget, which we'll use in the next few examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<article>\n    <h1 class="title">Serenity/JS</h1>\n</article>\n')),(0,i.kt)("h3",{id:"representing-a-page-element"},"Representing a page element"),(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElement#located"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElement.located"))," API to represent a single page element\nand one of the built-in ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/By"},(0,i.kt)("inlineCode",{parentName:"a"},"By")," selectors")," to instruct the browser how to locate it."),(0,i.kt)("p",null,"For example, you could use the following construct to represent the article title element:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElement } from '@serenity-js/web'\n\nconst articleTitle = PageElement.located(By.css('article > .title'))\n")),(0,i.kt)("p",null,"However, while you certainly could define page elements in-line in your tests or assign them to variables like in the example above,\na more idiomatic way is to declare ",(0,i.kt)("strong",{parentName:"p"},"reusable functions and methods")," named after the element they represent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElement } from '@serenity-js/web'\n\nconst articleTitle = () =>\n    PageElement.located(By.css('article > .title'))\n")),(0,i.kt)("p",null,"Standardising on using functions or methods makes it easier for you to refactor them to accept parameters later on if needed."),(0,i.kt)("admonition",{title:"Pro tip",type:"info"},(0,i.kt)("p",{parentName:"admonition"},'You can learn more about organising your page elements in the chapter on the "',(0,i.kt)("a",{parentName:"p",href:"/handbook/web-testing/page-objects-pattern"},"Page Objects Pattern"),'"')),(0,i.kt)("h3",{id:"customising-page-element-description"},"Customising page element description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElement"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElement"))," is an implementation of a ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Question"},(0,i.kt)("inlineCode",{parentName:"a"},"Question")),", which means you can\ncustomise its description to improve how Serenity/JS reports interactions with it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElement } from '@serenity-js/web'\n\nconst articleTitle = () =>\n    PageElement.located(By.css('article > .title'))\n        .describedAs('article title')\n")),(0,i.kt)("p",null,"When a custom description is provided, Serenity/JS will use it instead of the default one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"- PageElement located by css (article > .title)     // default description\n+ article title                                     // custom description\n")),(0,i.kt)("p",null,"The practical advantage of using custom descriptions is that once Serenity/JS understands\nwhat given element represents, it can offer much more human-friendly descriptions\nin your test reports:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.of(articleTitle()), equals('Serenity/JS'))\n)\n")),(0,i.kt)("p",null,"For example, thanks to the custom description, the above interaction will be reported as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Alice ensures that the text of article title does equal "Serenity/JS"\n')),(0,i.kt)("p",null,"Of course, if the element is not found or can't be interacted with, Serenity/JS will also report\nthe selector used to locate the element to make debugging test failures easier."),(0,i.kt)("h3",{id:"composing-pageelement-with-other-web-questions"},"Composing ",(0,i.kt)("inlineCode",{parentName:"h3"},"PageElement")," with other web questions"),(0,i.kt)("p",null,"Serenity/JS favours ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Function_composition_(computer_science)"},"functional composition"),"\nto help your code achieve polymorphic behaviour and promote code reuse.\nIn practice, this means that in order to learn about a specific attribute of a page element, you'd compose the element\nwith an ",(0,i.kt)("a",{parentName:"p",href:"/api/web"},"appropriate web-specific question"),"."),(0,i.kt)("p",null,"For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"articleTitle()")," in the code sample below produces a question that will be resolved to a web element:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElement, Text } from '@serenity-js/web'\n\nconst articleTitle = () =>\n    PageElement.located(By.css('article > .title'))\n")),(0,i.kt)("p",null,"To retrieve the text content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"articleTitle()")," element, compose it with the question about its ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Text"},(0,i.kt)("inlineCode",{parentName:"a"},"Text")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Text } from '@serenity-js/web'\n\nconst articleTitleText = () =>\n    Text.of(articleTitle())\n")),(0,i.kt)("p",null,"To retrieve the CSS classes of the ",(0,i.kt)("inlineCode",{parentName:"p"},"articleTitle()")," element, compose it with the question about its ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/CssClasses"},(0,i.kt)("inlineCode",{parentName:"a"},"CssClasses")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { CssClasses } from '@serenity-js/web'\n\nconst articleTitleCssClasses = () =>\n    CssClasses.of(articleTitle())\n")),(0,i.kt)("p",null,"A chain of composed questions, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Text.of(articleTitle())")," is resolved only when the actor needs to retrieve the underlying value."),(0,i.kt)("p",null,"For example, the text of the article title would be retrieved when performing an assertion:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.of(articleTitle()), equals('Serenity/JS'))\n)\n")),(0,i.kt)("p",null,"When composed questions are used with ",(0,i.kt)("a",{parentName:"p",href:"/handbook/design/waiting-and-synchronisation"},"synchronisation statements"),",\nthe underlying value will be retrieved every polling interval:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Duration, Wait } from '@serenity-js/core'\nimport { equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Wait.until(Text.of(articleTitle()), equals('Serenity/JS'))\n        .pollingEvery(Duration.ofMilliseconds(250))\n)\n")),(0,i.kt)("admonition",{title:"Pro Tip",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note that the result of ",(0,i.kt)("strong",{parentName:"p"},"composing questions")," is also a ",(0,i.kt)("strong",{parentName:"p"},"question"),".\nThis design makes questions reusable and allows for them to be composed further, until they're finally resolved by an ",(0,i.kt)("a",{parentName:"p",href:"/handbook/design/screenplay-pattern"},(0,i.kt)("em",{parentName:"a"},"actor")),".")),(0,i.kt)("h3",{id:"asserting-on-a-page-element"},"Asserting on a page element"),(0,i.kt)("p",null,"Serenity/JS web module provides ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Expectation"},"web-specific expectations")," you use\nto verify if the actual state of the given element is what you expect it to be."),(0,i.kt)("p",null,"For example, you might want to ensure that a given element ",(0,i.kt)("a",{parentName:"p",href:"/api/web/function/isVisible"},"is visible"),", i.e. not obstructed by other elements:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure } from '@serenity-js/assertions'\nimport { isVisible } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(articleTitle(), isVisible()),\n)\n")),(0,i.kt)("p",null,"You can also assert that a specific property of the element, like its ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Text"},"text"),", to have a certain value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.of(articleTitle()), equals('Serenity/JS')),\n)\n")),(0,i.kt)("p",null,"Note that you're not limited to web-first expectations and you can use\nany other expectations from the ",(0,i.kt)("a",{parentName:"p",href:"/api/assertions"},"Serenity/JS assertions module")," or ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Expectation"},"write them yourself"),"."),(0,i.kt)("admonition",{title:"Learn more",type:"info"},(0,i.kt)("p",{parentName:"admonition"},'Learn more about asserting on page elements in chapter "',(0,i.kt)("a",{parentName:"p",href:"/handbook/design/assertions#web-assertions"},"Web-first assertions"),'".')),(0,i.kt)("h3",{id:"waiting-for-a-page-element"},"Waiting for a page element"),(0,i.kt)("p",null,"Serenity/JS web module provides ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Expectation"},"web-specific expectations")," you use\nto synchronise your test code with the system under test and wait until its state meets your expectations."),(0,i.kt)("p",null,"For example, you might want for your test scenario to wait until a given element ",(0,i.kt)("a",{parentName:"p",href:"/api/web/function/isVisible"},"is visible"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Duration, Wait } from '@serenity-js/core'\nimport { isVisible } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Wait.upTo(Duration.ofSeconds(2))\n        .until(articleTitle(), isVisible()),\n)\n")),(0,i.kt)("p",null,"You can also wait for a specific property of the element, like its ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Text"},"text"),", to have a certain value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Wait } from '@serenity-js/core'\nimport { includes } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Wait.until(Text.of(articleTitle()), includes('Serenity/JS')),\n)\n")),(0,i.kt)("p",null,"Note that you're not limited to web-first expectations and you can use\nany other expectations from the ",(0,i.kt)("a",{parentName:"p",href:"/api/assertions"},"Serenity/JS assertions module")," or ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Expectation"},"write them yourself"),"."),(0,i.kt)("admonition",{title:"Learn more",type:"info"},(0,i.kt)("p",{parentName:"admonition"},'Learn more about synchronising your web tests with the system under test in chapter "',(0,i.kt)("a",{parentName:"p",href:"/handbook/design/waiting-and-synchronisation"},"Waiting and synchronisation"),'".')),(0,i.kt)("h3",{id:"using-selector-aliases"},"Using selector aliases"),(0,i.kt)("p",null,"In scenarios where different elements can be identified using a similar selector pattern you might want to implement\ncustom selector aliases to avoid code duplication."),(0,i.kt)("p",null,"For example, below function ",(0,i.kt)("inlineCode",{parentName:"p"},"byRole")," helps to locate elements with\na desired ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles"},"accessibility role"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { By, Click, PageElement } from '@serenity-js/web'\n\nconst byRole = (roleName: string) =>\n    By.css(`[role=\"${ roleName }\"]`)\n\nawait actorCalled('Alice').attemptsTo(\n    Click.on(PageElement.located(byRole('button'))),\n)\n")),(0,i.kt)("h3",{id:"using-dynamic-selectors"},"Using dynamic selectors"),(0,i.kt)("p",null,"In some scenarios, the exact value of the selector you need to use becomes known only at runtime.\nThis is typically the case when element attributes are calculated dynamically based on user actions."),(0,i.kt)("p",null,"To cater for that, all ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/By"},(0,i.kt)("inlineCode",{parentName:"a"},"By")," selectors")," let you define\nselector value using an ",(0,i.kt)("a",{parentName:"p",href:"/api/core#Answerable"},(0,i.kt)("inlineCode",{parentName:"a"},"Answerable<string>")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Answerable, q } from '@serenity-js/core'\nimport { By, PageElement } from '@serenity-js/web'\n\nconst byTestId = (dataTestId: Answerable<string>) =>\n    PageElement.located(By.css(q`[data-test-id=\"${ dataTestId }\"]`))\n")),(0,i.kt)("p",null,"Note that the example above uses ",(0,i.kt)("a",{parentName:"p",href:"/api/core/function/q"},"tag function ",(0,i.kt)("inlineCode",{parentName:"a"},"q"))," to concatenate a static string with an ",(0,i.kt)("inlineCode",{parentName:"p"},"Answerable<string>"),"."),(0,i.kt)("h3",{id:"using-meta-questions"},"Using meta-questions"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PageElement")," is a ",(0,i.kt)("a",{parentName:"p",href:"/api/core/interface/MetaQuestion"},(0,i.kt)("inlineCode",{parentName:"a"},"meta-question"))," that can be resolved ",(0,i.kt)("em",{parentName:"p"},"in relation")," to another ",(0,i.kt)("inlineCode",{parentName:"p"},"Question"),"."),(0,i.kt)("p",null,"What this means in this context is that you can define a ",(0,i.kt)("inlineCode",{parentName:"p"},"PageElement")," as having a child-parent relationship with another ",(0,i.kt)("inlineCode",{parentName:"p"},"PageElement"),",\nand do it either dynamically or statically using the ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElement#of"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElement#of"))," API."),(0,i.kt)("p",null,"To better understand how to apply this in practice, consider the below widget, which describes an article and its summary:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<article>\n    <section class="summary">\n        <h2 class="title">Key points:</h2>\n    </section>\n\n    <h1 class="title">Serenity/JS</h1>\n</article>\n')),(0,i.kt)("p",null,"Next, consider page elements describing those two parts of the widget:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PageElement, By } from '@serenity-js/web'\n\nconst blogArticle = () =>\n    PageElement.located(By.css('article'))\n        .describedAs('blog article')\n\nconst summary = () =>\n    PageElement.located(By.css('.summary'))\n        .describedAs('summary')\n")),(0,i.kt)("p",null,"Now, since both the article and its summary have a title identified by a CSS class called ",(0,i.kt)("inlineCode",{parentName:"p"},".title"),", we can define\na third page element to represent it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const title = () =>\n    PageElement.located(By.css('.title'))\n        .describedAs('title')\n")),(0,i.kt)("p",null,"With the three page elements defined above, we can easily reuse function ",(0,i.kt)("inlineCode",{parentName:"p"},"title()")," by composing it with either the ",(0,i.kt)("inlineCode",{parentName:"p"},"blogArticle()")," or its ",(0,i.kt)("inlineCode",{parentName:"p"},"summary()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals, startsWith } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.of(title().of(blogArticle())), equals('Serenity/JS')),\n    Ensure.that(Text.of(title().of(summary())), startsWith('Key points')),\n)\n")),(0,i.kt)("admonition",{title:"Pro tip",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Using meta questions to enable page element reuse can be a great productivity boost that is most effective\nwhen the system under test uses a consistent convention to name element identifiers and classes.\nThis is typically the case when you use a good web UI design system and a consistent UI component library.")),(0,i.kt)("h2",{id:"working-with-a-collection-of-page-elements"},"Working with a collection of page elements"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements"))," class is a ",(0,i.kt)("a",{parentName:"p",href:"/handbook/design/screenplay-pattern"},"Screenplay Pattern"),"-compatible\nabstraction that represents a collection of ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Element"},"elements")," in a web interface\nthat share some common characteristics."),(0,i.kt)("p",null,"To help you understand how to use this abstraction, consider the below shopping list widget, which we'll use in the next few examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ul>\n    <li class="buy">oats</li>\n    <li class="buy">coconut milk</li>\n    <li class="bought">coffee</li>\n</ul>\n')),(0,i.kt)("h3",{id:"representing-a-collection-of-page-elements"},"Representing a collection of page elements"),(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements#located"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements.located"))," API to represent a collection of page elements\nand one of the built-in ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/By"},(0,i.kt)("inlineCode",{parentName:"a"},"By")," selectors")," to instruct the browser how to locate them."),(0,i.kt)("p",null,"For example, to represent all the shopping list items from the ",(0,i.kt)("a",{parentName:"p",href:"#working-with-a-collection-of-page-elements"},"example above"),",\nyou could use the following reusable function named after the elements it represents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElements } from '@serenity-js/web'\n\nconst shoppingListItems = () =>\n    PageElements.located(By.css('li'))\n")),(0,i.kt)("h3",{id:"retrieving-a-specific-element-from-a-collection"},"Retrieving a specific element from a collection"),(0,i.kt)("p",null,"If you need to retrieve a specific element from a collection, and you know what position it occupies, you can use\n",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements#first"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements#first()")),", ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements#last"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements#last()")),", and ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements#nth"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements#nth(index)"))," APIs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElements } from '@serenity-js/web'\n\nconst firstItem = () =>\n    PageElements.located(By.css('li'))\n        .first()\n\nconst secondItem = () =>\n    PageElements.located(By.css('li'))\n        .nth(1) // notice zero-based indexing\n\nconst lastItem = () =>\n    PageElements.located(By.css('li'))\n        .last()\n")),(0,i.kt)("p",null,"Above APIs are particularly useful when you need to retrieve elements from a sorted collection, e.g. the most recent comment, last order, nth position from a league table, and so on."),(0,i.kt)("h3",{id:"customising-page-elements-description"},"Customising page elements description"),(0,i.kt)("p",null,"Just like ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElement"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElement")),", ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements"))," class is also an implementation of a ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Question"},(0,i.kt)("inlineCode",{parentName:"a"},"Question")),".\nThis means you can customise its description to improve how Serenity/JS reports interactions with the given collection of page elements:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElements } from '@serenity-js/web'\n\nconst shoppingListItems = () =>\n    PageElements.located(By.css('li'))\n        .describedAs('shopping list items');\n")),(0,i.kt)("h3",{id:"composing-pageelements-with-other-questions"},"Composing ",(0,i.kt)("inlineCode",{parentName:"h3"},"PageElements")," with other questions"),(0,i.kt)("p",null,"Similarly to ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElement"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElement")),", ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements"))," can be composed with other questions,\nlike ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Text"},(0,i.kt)("inlineCode",{parentName:"a"},"Text.ofAll")),", to retrieve aggregate information about all the elements in the collection:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Text } from '@serenity-js/web'\n\nconst namesOfShoppingListItems = () =>\n    Text.ofAll(shoppingListItems())\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Text"},(0,i.kt)("inlineCode",{parentName:"a"},"Text.ofAll"))," API is particularly useful when you need to retrieve text content of multiple elements and assert on it all at once:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.ofAll(shoppingListItems()), equals([\n        'oats',\n        'coconut milk',\n        'coffee'\n    ]))\n)\n")),(0,i.kt)("h3",{id:"mapping-page-elements-in-a-collection"},"Mapping page elements in a collection"),(0,i.kt)("p",null,"Just like with using ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Function_composition_(computer_science)"},"functional composition"),"\nand ",(0,i.kt)("a",{parentName:"p",href:"/api/core/interface/MetaQuestion"},"meta-questions"),"\nto map an individual element to ",(0,i.kt)("a",{parentName:"p",href:"#composing-questions"},"another type")," or ",(0,i.kt)("a",{parentName:"p",href:"#using-meta-questions"},"another element"),",\nyou can map each element in a collection of page elements. To do that, use the ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements#eachMappedTo"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements#eachMappedTo"))," API."),(0,i.kt)("p",null,"For example, you could map each ",(0,i.kt)("a",{parentName:"p",href:"#working-with-a-collection-of-page-elements"},"shopping list item element")," to its text content using the ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Text"},(0,i.kt)("inlineCode",{parentName:"a"},"Text"))," meta-question:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(\n        shoppingListItems().eachMappedTo(Text),\n        equals([\n            'oats',\n            'coconut milk',\n            'coffee'\n        ])\n    )\n)\n")),(0,i.kt)("p",null,"You could also retrieve the ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/CssClasses"},(0,i.kt)("inlineCode",{parentName:"a"},"CssClasses"))," of each element:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { CssClasses } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(\n        shoppingListItems().eachMappedTo(CssClasses),\n        equals([\n            [ 'buy' ],\n            [ 'buy' ],\n            [ 'bought' ],\n        ])\n    )\n)\n")),(0,i.kt)("p",null,"You could also use any other of the built-in meta-questions, like ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Attribute"},(0,i.kt)("inlineCode",{parentName:"a"},"Attribute.called('name')"))," or ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Value"},(0,i.kt)("inlineCode",{parentName:"a"},"Value")),".\nYou could also create your own ",(0,i.kt)("a",{parentName:"p",href:"/api/core/interface/MetaQuestion"},"meta-questions")," if needed."),(0,i.kt)("h3",{id:"filtering-page-elements-in-a-collection"},"Filtering page elements in a collection"),(0,i.kt)("p",null,"While Serenity/JS ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Expectation"},"expectations")," are most commonly used in ",(0,i.kt)("a",{parentName:"p",href:"#asserting-on-a-page-element"},"assertion")," and ",(0,i.kt)("a",{parentName:"p",href:"#waiting-for-a-page-element"},"synchronisation")," statements,\nwhen used with ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements#where"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements#where"))," API they can offer a great and reusable alternative to complex CSS selectors and XPath expressions."),(0,i.kt)("p",null,"For example, you could use the ",(0,i.kt)("a",{parentName:"p",href:"/api/core/interface/MetaQuestion"},"meta-question")," about the ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/CssClasses"},(0,i.kt)("inlineCode",{parentName:"a"},"CssClasses"))," and an expectation to ",(0,i.kt)("a",{parentName:"p",href:"/api/assertions/function/contain"},(0,i.kt)("inlineCode",{parentName:"a"},"contain")),"\nto find only those items that still need to be bought:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, CssClasses, PageElements } from '@serenity-js/web'\nimport { contain } from '@serenity-js/assertions'\n\nconst boughtItems = () =>\n    PageElements.located(By.css('li'))\n        .where(CssClasses, contain('bought'))\n        .describedAs('bought items')\n")),(0,i.kt)("p",null,"Furthermore, you can chain multiple filter statements together. For example, you might want to retrieve only those\nelements that ",(0,i.kt)("a",{parentName:"p",href:"/api/assertions/function/includes"},"include"),' sub-string "co" ("coffee" and "coconut milk"), and of them only those that have already been marked as "bought":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, CssClasses, PageElements } from '@serenity-js/web'\nimport { contain, includes } from '@serenity-js/assertions'\n\nconst myItems = () =>\n    PageElements.located(By.css('li'))\n        .where(Text, includes('co'))\n        .where(CssClasses, contain('bought'))\n")),(0,i.kt)("h2",{id:"combining-mapping-composition-and-filtering"},"Combining mapping, composition, and filtering"),(0,i.kt)("p",null,"Serenity/JS mapping, composition, and filtering features become very useful when you learn how to use them together."),(0,i.kt)("p",null,"Consider the following, slightly more sophisticated shopping list widget, which we'll use to demonstrate\nsome more advanced ",(0,i.kt)("abbr",{title:"Page Element Query Language"},"PEQL")," features in the next few examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ul class="shopping-list">\n    <li class="item buy">\n        <input type="checkbox" class="toggle">\n        <label>oats</label>\n        <span class="quantity">1</span>\n        <button class="destroy">X</button>\n    </li>\n    <li class="item buy">\n        <input type="checkbox" class="toggle">\n        <label>coconut milk</label>\n        <span class="quantity">2</span>\n        <button class="destroy">X</button>\n    </li>\n    <li class="item bought">\n        <input type="checkbox" class="toggle">\n        <label>coffee</label>\n        <span class="quantity">1</span>\n        <button class="destroy">X</button>\n    </li>\n</ul>\n')),(0,i.kt)("p",null,"In contrast to the ",(0,i.kt)("a",{parentName:"p",href:"#working-with-a-collection-of-page-elements"},"original example"),",\nwe can no longer verify what items are displayed by simply fetching the text content of each ",(0,i.kt)("inlineCode",{parentName:"p"},"li")," node.\nThat's because doing so would also include the information about their quantity and the label of the \"destroy\" button, which means we'd end up with a result like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"oats 1 X\ncoconu milk 2 X\ncoffee 1 X\n")),(0,i.kt)("p",null,"A better approach is to introduce page elements representing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a collection of shopping list items"),(0,i.kt)("li",{parentName:"ul"},"interactive elements of each shopping list item, so:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a checkbox"),(0,i.kt)("li",{parentName:"ul"},"a label"),(0,i.kt)("li",{parentName:"ul"},"a quantity"),(0,i.kt)("li",{parentName:"ul"},"a destroy button")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { By, PageElements } from '@serenity-js/web'\n\nconst shoppingListItems = () =>\n    PageElements.located(By.css('li.todo'))\n        .describedAs('shopping list items')\n\nconst checkbox = () =>\n    PageElement.located(By.css('input.checkbox')).describedAs('checkbox')\n\nconst label = () =>\n    PageElement.located(By.css('label')).describedAs('label')\n\nconst quantity = () =>\n    PageElement.located(By.css('span.quantity')).describedAs('quantity')\n\nconst destroyButton = () =>\n    PageElement.located(By.css('button.destroy')).describedAs('destroy button')\n")),(0,i.kt)("h3",{id:"mapping-elements-in-a-collection-using-meta-questions"},"Mapping elements in a collection using meta-questions"),(0,i.kt)("p",null,"To retrieve the text of all the labels of the displayed shopping list items, you could map a collection of shopping list items\nto their labels:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const labels = () =>\n    shoppingListItems()\n        .eachMappedTo(label())\n")),(0,i.kt)("p",null,"Next, you could retrieve the text of all the labels:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"Text.ofAll(labels())\n")),(0,i.kt)("p",null,"Full example would look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Text } from '@serenity-js/web'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nconst labels = () =>\n    shoppingListItems()\n        .eachMappedTo(label())\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.ofAll(labels()), equals([\n        'oats',\n        'coconut milk',\n        'coffee',\n    ]))\n)\n")),(0,i.kt)("h3",{id:"using-partially-applied-meta-questions"},"Using partially-applied meta-questions"),(0,i.kt)("p",null,"A meta-question is any type that implements the ",(0,i.kt)("a",{parentName:"p",href:"/api/core/interface/MetaQuestion"},(0,i.kt)("inlineCode",{parentName:"a"},"MetaQuestion"))," interface.\nThis means that either a ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"},"class"),", or an instance of a class,\ncould be a meta-question, as long as they provided a method called ",(0,i.kt)("a",{parentName:"p",href:"/api/core/interface/MetaQuestion#of"},(0,i.kt)("inlineCode",{parentName:"a"},"of"))," that accepted\na single argument and returned a result of ",(0,i.kt)("inlineCode",{parentName:"p"},"Question<Result_Type>"),"."),(0,i.kt)("p",null,"For example, ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Text"},(0,i.kt)("inlineCode",{parentName:"a"},"Text"))," is a class-level meta-question. This means that the class has a static method ",(0,i.kt)("a",{parentName:"p",href:"/api/web/class/Text#of"},(0,i.kt)("inlineCode",{parentName:"a"},"Text.of")),"\nthat accepts a single argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"PageElement")," and returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Question<Promise<string>>")," that resolves to its text content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PageElement, By, Text } from '@serenity-js/web'\n\nconst label = () =>\n    PageElement.located(By.css('label')).describedAs('label')\n\nconst textOfLabel = () =>\n    Text.of(label())\n")),(0,i.kt)("p",null,"However, the instance produced by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"Text.of(label())")," is ",(0,i.kt)("em",{parentName:"p"},"also")," a meta-question.\nThis means that this instance-level meta-question ",(0,i.kt)("em",{parentName:"p"},"also")," has a method called ",(0,i.kt)("inlineCode",{parentName:"p"},"of"),"  that accepts a single argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"PageElement")," and returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Question<Promise<string>>")," that resolves to its text content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PageElement, By, Text } from '@serenity-js/web'\n\nconst label = () =>\n    PageElement.located(By.css('label')).describedAs('label')\n\nconst shoppingListItem = () =>\n    PageElement.located(By.css('li.todo'))\n\nconst textOfLabel = () =>\n    Text.of(label())\n\nconst textOfShoppingListItemLabel = () =>\n    textOfLabel().of(shoppingListItem())\n")),(0,i.kt)("p",null,"This ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Double_dispatch"},"double-dispatch mechanism")," allows you to\ndefine partially-applied meta-questions, like ",(0,i.kt)("inlineCode",{parentName:"p"},"Text.of(label())"),", that can be chained again\nto describe the relationship between the ",(0,i.kt)("inlineCode",{parentName:"p"},"label()")," and its container."),(0,i.kt)("p",null,"This design is particularly handy when your\nsystem under tests reuses a relatively small number of widgets to compose more complex elements of the interface.\nFor example, when a ",(0,i.kt)("inlineCode",{parentName:"p"},"label()")," is always defined using the same HTML structure, but gets embedded in different containers\nyou could have ",(0,i.kt)("inlineCode",{parentName:"p"},"label().of(formField())"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"label().of(image())"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"label().of(searchResult())")," and so on,\nmaking it easier to reuse your test code."),(0,i.kt)("p",null,"This pattern is particularly important in mapping elements of a collection to properties of their child elements,\nor in filtering a collection of page elements based on properties of their child-elements."),(0,i.kt)("admonition",{title:"Types of Meta-Questions",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A ",(0,i.kt)("strong",{parentName:"p"},"meta-question")," is any type that implements the ",(0,i.kt)("a",{parentName:"p",href:"/api/core/interface/MetaQuestion"},(0,i.kt)("inlineCode",{parentName:"a"},"MetaQuestion"))," interface,\nsuch as ",(0,i.kt)("inlineCode",{parentName:"p"},"Text"),"."),(0,i.kt)("p",{parentName:"admonition"},"An ",(0,i.kt)("strong",{parentName:"p"},"applied meta-question")," is a meta-question that's already bound to its argument question.\nFor example, the result of calling ",(0,i.kt)("inlineCode",{parentName:"p"},"Text.of(pageElement)")," is an applied meta-question that, when resolved, returns\nthe text of that particular element."),(0,i.kt)("p",{parentName:"admonition"},"A ",(0,i.kt)("strong",{parentName:"p"},"partially-applied meta-question")," is an applied meta-question that can be bound ",(0,i.kt)("em",{parentName:"p"},"again")," to describe a relationship\nbetween the already bound argument and another one, e.g. its container."),(0,i.kt)("p",{parentName:"admonition"},"For example, the result of calling ",(0,i.kt)("inlineCode",{parentName:"p"},"Text.of(pageElement)")," is an applied meta-question, as it can be resolved by an ",(0,i.kt)("inlineCode",{parentName:"p"},"actor"),"\nto return the text of that one specific element. However, it's also a partially-applied meta-question, as it can be\nbound again to describe the relationship between ",(0,i.kt)("inlineCode",{parentName:"p"},"pageElement")," and its container, i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"Text.of(pageElement).of(containerElement)"),".")),(0,i.kt)("h3",{id:"mapping-elements-in-a-collection-using-partially-applied-meta-questions"},"Mapping elements in a collection using partially-applied meta-questions"),(0,i.kt)("p",null,"There's another way to retrieve the text of all the labels, apart from mapping each element in a collection to its label element, and then retrieving text content of all the results like we did in the ",(0,i.kt)("a",{parentName:"p",href:"#mapping-elements-in-a-collection-using-meta-questions"},"previous example"),"."),(0,i.kt)("p",null,"What you could do, is use ",(0,i.kt)("a",{parentName:"p",href:"/handbook/web-testing/page-element-query-language#using-partially-applied-meta-questions"},"partially-applied meta-question")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Text.of(label())")," to map each page element directly to text of its label:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const labels = () =>\n    shoppingListItems()\n        .eachMappedTo(Text.of(label()))\n")),(0,i.kt)("p",null,"Next, compare the result with expected values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Text } from '@serenity-js/web'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nconst labels = () =>\n    shoppingListItems()\n        .eachMappedTo(Text.of(label()))\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(labels(), equals([\n        'oats',\n        'coconut milk',\n        'coffee',\n    ]))\n)\n")),(0,i.kt)("h3",{id:"filtering-a-collection-using-partially-applied-meta-questions"},"Filtering a collection using partially-applied meta-questions"),(0,i.kt)("p",null,"You can use ",(0,i.kt)("a",{parentName:"p",href:"/handbook/web-testing/page-element-query-language#using-partially-applied-meta-questions"},"partially-applied meta-questions")," like ",(0,i.kt)("inlineCode",{parentName:"p"},"Text.of(label())")," to filter the list of shopping list items\nto only those elements that meet your ",(0,i.kt)("a",{parentName:"p",href:"/api/core/class/Expectation"},"expectations"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { CssClasses, Text } from '@serenity-js/web'\nimport { Ensure, equals, includes } from '@serenity-js/assertions'\n\nconst firstBought = () =>\n    shoppingListItems()\n        .where(Text.of(label()), includes('co'))    // 'coffee' and 'coconut milk'\n        .where(CssClasses, contain('bought'))       // 'coffee'\n        .first()\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.of(firstBought()), equals('coffee'))\n)\n")),(0,i.kt)("h3",{id:"iterating-over-elements"},"Iterating over elements"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/api/web/class/PageElements#forEach"},(0,i.kt)("inlineCode",{parentName:"a"},"PageElements#forEach"))," API allows you to perform a sequence of interactions\nwith each element of the collection."),(0,i.kt)("p",null,"For example, to remove every already bought item from the list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled } from '@serenity-js/core'\nimport { Click, CssClasses } from '@serenity-js/web'\n\nconst boughtItems = () =>\n    shoppingListItems()\n        .where(CssClasses, contain('bought'))\n\nawait actorCalled('Alice').attemptsTo(\n    boughtItems().forEach(({ item, actor }) =>  // note both `item` and `actor`\n        actor.attemptsTo(\n            Click.on(destroyButton().of(item)),\n        )\n    )\n)\n")))}u.isMDXComponent=!0}}]);